[
 {
  "url": "/webinars/202005-001/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202006-002/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202006-003/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202006-004/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202006-005/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202006-006/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202006-007/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202006-008/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202006-009/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202007-001/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202007-005/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202007-006/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202007-007/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202007-008/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202007-009/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202007-010/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202007-011/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202007-012/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202007-013/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202008-001/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202008-002/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202008-003/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202008-004/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202008-005/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202008-006/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202008-007/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202008-008/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202008-009/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202008-010/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202008-011/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202009-002/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202009-003/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202009-004/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202009-005/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202009-006/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202009-007/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202009-008/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202009-009/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202009-010/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202009-011/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202009-012/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202009-013/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202009-014/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202009-016/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202010-001/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202010-002/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202010-003/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202010-004/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202010-005/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202010-006/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202010-007/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202010-008/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202010-009/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202010-010/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202011-001/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202011-002/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202011-003/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202011-004/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202012-001/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202012-002/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202012-003/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/community-calls/2021-05/",
  "title": "RSK Community Call, May 2021 - Summary",
  "category": "",
  "tags": "community-call, kb, rsk, rskj, rskip, powpeg",
  "date": "",
  "desc": ""
 },
 {
  "url": "/community-calls/2021-07/",
  "title": "RSK Community Call, July 2021 - Summary",
  "category": "",
  "tags": "community-call, kb, rsk, rskj, iris, network-upgrades, rskip, powpeg, flyover-protocol",
  "date": "",
  "desc": ""
 },
 {
  "url": "/community-calls/2021-08/",
  "title": "RSK Community Call, August 2021 - Summary",
  "category": "",
  "tags": "community-call, rsk, rskj, rskip, powpeg, UTXOs, peg-out, mulitisig, time-lock",
  "date": "",
  "desc": ""
 },
 {
  "url": "/community-calls/2021-10/",
  "title": "RSK Community Call, October 2021 - Summary",
  "category": "",
  "tags": "community-call, rsk, rskj, rskip, powpeg, peg-out, call-data, releases",
  "date": "",
  "desc": ""
 },
 {
  "url": "/community-calls/2021-12/",
  "title": "RSK Community Call, December 2021 - Summary",
  "category": "",
  "tags": "community-call, rsk, rskj, rskip, powpeg, peg-out, call-data, releases",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202102-001/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202102-002/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202102-003/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202102-004/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/libs/javascript/Advanced-usage/",
  "title": "RNS JS Library - Advanced Usage",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Instantiate the lib with your local blockchain The library has already set the contract addresses for Rootstock (RSK) Mainnet and Testnet, so if the Web3 instance points to one of those networks, no extra action is needed. If you want to use your local blockchain, contract addresses must be provided and should be sent as parameter. If a custom blockchain has been set but the contracts addresses are not provided, it will throw “No contract addresses provided” on the first operation invoked. Example async function myCustomGetOwner(domain) { const web3 = new Web3(&#39;http://localhost:7545&#39;); const options = { contractAddresses: { registry: &#39;0x0000000000000000000000000000000123456789&#39; } }; const rns = new RNS(web3, options); const address = await rns.addr(&#39;testing.rsk&#39;); } You can also specify a different networkId to perform checksum validations according to EIP-1191, it should be added in the &amp;lt;code…"
 },
 {
  "url": "/rif/rns/libs/Android/",
  "title": "Android Library",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, android, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Android Library to resolve your RIF Name Service address on your app. Import into your app Method 1: Import the AAR. You can go to our release page, and download the release. Here you have the AAR to import into your project, including the debug lib to use it. Method 2: Clone the project. user@computer:~/some/path/$ git clone git@github.com:rnsdomains/RNS-SDK-android.git Cloning into &#39;RNS-SDK-android&#39;... user@computer:~/some/path/$ git checkout &amp;lt;INSERT_RELEASE_TAG_HERE&amp;gt; Import using AndroidStudio File -&amp;gt; New -&amp;gt; Import Module… With either of those methods methods You will have to add this lines to your build.gradle file, or do it in your Project Settings ( CTRL+ALT+SHIFT+S ) and set sourceCompatibility to 1.8: android { compileOptions { sourceCompatibility 1.8 targetCompatibility 1.8 } } How to use You will need access to a running rootstock (rsk) node that can make calls to the JSON-RPC. For this we have our public nodes available for you, that are already configured in our build.gradle file. You can change this or use the constructors for the resolver that will be described below. &amp;lt;pre…"
 },
 {
  "url": "/rif/rns/libs/javascript/Contribute/",
  "title": "RNS JS Library - Contribute",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Run for development Install dependencies: git clone git@github.com:rnsdomains/rns-js.git cd rns-js npm i Run tests: npm test Try out your development Create a test project # in rns-js folder npm run build npm link cd .. mkdir rns-js-test cd rns-js-test npm init npm i web3 npm link @rsksmart/rns Create a new .js file, instantiate the library and try out your development. Versioning master branch points to the latest release. develop branch contains changes that will apply next release. The first commit after release bumps to next version. Other branches (feature branches) point to develop. Find release scopes in milestones."
 },
 {
  "url": "/rif/rns/architecture/Deed/",
  "title": "Deed",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ":warning: Deprecated. Find new registrar here. The Deed contract has two main features: Store RIF tokens locked on a bid Handle the annual rent payment. Deed contract holds RIF tokens in exchange for a domain ownership. The Deed contract is controlled by the Registrar and is the only one capable to sends tokens back to the owner. ABI: DeedABI.json Submitting a bid creates a Deed contract which holds the funds and stores information related to the owner and the domain expiration. Have a look at the Registrar bid submission: // Creates a new hash contract with the owner TokenDeed createdBid = new TokenDeed(_from, _tokenQuantity, tokenContract); require(tokenContract.transfer(createdBid, _tokenQuantity)); sealedBids[_from][_sealedBid] = createdBid; Once bidded, you can query for a particular bid’s Deed: var deedAddress = registrar.sealedBids(address, sealedBid) var deedInstante = web3.contract(deedAbi)…"
 },
 {
  "url": "/rif/rns/libs/javascript/Errors/",
  "title": "RNS JS Library - Error knowledge base",
  "category": "",
  "tags": "rif, rns, error, knowledge-base, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Handle errors with RNS library RNS Library extends the Error class with two extra properties: id - The knowledge base ID ref - A link to the specific error within this page KB000 Message: Unknown error. Description: Unknown error. KB001 Message: No addr resolution set Description: The given domain has a resolver, but the resolution has not been set KB002 Message: No addr resolution Description: The given domain has a resolver, but it does not support addr interface KB003 Message: No resolver Description: The given domain doesn’t have a resolver set KB004 Message: Library not composed Description: Thrown when trying to accesses rns.contracts before executing rns.compose() KB005 Message: No contract addresses provided Description: Thrown when constructing lib on a local/custom RNS environment and contract addresses are not provided KB006 Message: No chain address resolution Description: The given domain has a resolver, but the resolution for the given chain has not been set KB007 Message: No chain address resolution set Description: The given domain has a resolver, but it does not support chainAddr interface …"
 },
 {
  "url": "/rif/rns/libs/javascript/Getting-started/",
  "title": "RNS JS Library - Getting Started",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Installation npm i web3 @rsksmart/rns Source code: github.com/rnsdomains/rns-js npm: npmjs.com/package/@rsksmart/rns Or just use it directly in your webpage: &amp;lt;script src=&quot;https://unpkg.com/web3@1.2.6/dist/web3.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&quot;https://unpkg.com/@rsksmart/rns@1.5.11/lib/rns.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; Don’t forget to specify the desired version of the package! Basic usage import Web3 from &#39;web3&#39; import RNS from &#39;@rsksmart/rns&#39; import { ChainId } from &#39;@rsksmart/rns/types&#39; const web3 = new Web3(&#39;https://public-node.rsk.co&#39;) const rns = new RNS(web3) Remember that if you are running the code in a webpage, no import statements are needed, just instantiate the libs made available in the global scope. Find instructions in the advanced usage section if running local or custom blockchains. Get an address: rns.addr(&#39;testing.rsk&#39;).then(console.log) Get Bitcoin address: rns.addr(&#39;testing.rsk&#39;&amp;lt;span…"
 },
 {
  "url": "/rif/rns/architecture/MultiCryptoResolver/",
  "title": "Multi-Crypto Resolver",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Multi-Crypto Resolver In the RNS registry we have launched a resolver capable of resolve addresses from other blockchains using a chain id as an identifier. With the same restrictions and visibility as the Public Resolver. This resolver implements all the methods described in the resolver specification Mainnet information Multi-Crypto Resolver Adrress: 0x99a12be4C89CbF6CFD11d1F2c029904a7B644368 ABI: MultiCryptoResolverABI.json See RNS Testnet section for testing environment information. Index Methods content setContent chainAddr setChainAddr chainMetadata setChainMetadata setChainAddrWithMetadata Events ChainAddrChanged Context AbstractRNS rns; rns: the Registry contract Storage mapping(bytes32=&amp;gt;address) addresses; mapping(bytes32=&amp;gt;bytes32) hashes; adresses: for each namehash entry, stores an address hashes: for each namehash entry, stores a hash Methods content Returns the content hash associated with an RNS node. Note that this resource type is not standardized, and will…"
 },
 {
  "url": "/rif/rns/tools/MyCrypto/",
  "title": "MyCrypto",
  "category": "",
  "tags": "rif, rns, rif-name-service, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "MyCrypto is an open-source, client-side tool for generating ether wallets, handling ERC-20 tokens, and interacting with the blockchain more easily. There are two platforms to access MyCrypto, both with almost the same functionalities: the web app and the desktop app. There are more ways to access a wallet via desktop app, for example using a mnemonic or a private key. MyCrypto has a Contracts tab, where you can find some existing contracts loads, and other contracts can be instanced. We are going to use this functionality to get a domain on RNS registry. There are two ways to access a contract: If the contract is listed, just select it and access to it Otherwise you may need the contract address and the ABI (interface), which is given [here] for all mentioned contracts. Register a domain A domain is composed by a label and the .rsk suffix (top level domain). For example: nakamoto.rsk, where nakamoto is the label. When sha3 or namehash evaluations are asked, go here to interact with the tools and get the requested value. When sha3 is asked for a label, you should not evaluate it with .rsk suffix.…"
 },
 {
  "url": "/rif/rns/architecture/NameResolver/",
  "title": "Name Resolver",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Return a valid RNS name for the requested node, or the empty string if no name is defined for the requested node. Mainnet Address: 0x4b1a11bf6723e60b9d2e02aa3ece34e24bde77d9 ABI: NameResolverABI.json See RNS Testnet section for testing environment information. Index Methods setName name Methods setName Sets the name associated with an RNS node, for reverse records. May only be called by the owner of that node in the RNS registry. Signature function setName(bytes32 node, string calldata name) external Parameters node: the node to update. name: the name to set. Events event NameChanged(bytes32 node, string name); name Returns the name associated with an RNS node, for reverse records. Signature function name(bytes32 node) external view returns (string memory) Parameters node: the node to query. Events event NameChanged(bytes32 node, string name); Returns the associated name."
 },
 {
  "url": "/rif/rns/libs/javascript/Operations/",
  "title": "RNS JS Library - Operations",
  "category": "",
  "tags": "rif, rns, rif-name-service, operations, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Available operations addr setAddr contenthash setContenthash reverse setReverse setResolver available (for domains) subdomains.available subdomains.setOwner subdomains.create utils addr Get the address of a given domain and chain. If chainId is not provided, it resolves current blockchain address. Signature async addr(domain: string, chainId?: ChainId): Promise&amp;lt;string&amp;gt; Parameters domain: Domain to be resolved. chainId: Chain identifier listed in SLIP44 Returns string: the address resolution Throws KB001 KB002 KB003 KB006 KB007 Examples Get an address: rns.addr(&#39;testing.rsk&#39;).then(console.log) Get Bitcoin address: rns.addr(&#39;testing.rsk&#39;, ChainId.BITCOIN).then(console.log) setAddr Set the address of a given domain and chain.…"
 },
 {
  "url": "/rif/rns/libs/Python/",
  "title": "Python Library",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, python, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Python Library to resolve your RIF Name Service address on your app. Requirements Python Version: 3.7 Pip Version: lastest VirtualEnv Version: lastest Testing To run unit tests, clone this repository. Run Rootstock (RSK) Node and deploy resolver contracts. Check constants folder to specify, RPC_CLIENT_URL in client_constants.py file and RNS_RESOLVER_ADDRESS in rns_constants.py file. Add the PYTHONPATH environment variable of your operating system to the path of the folder where you cloned the project, this will allow the tests to directly invoke the file by console. Run: pip install virtualenv virtualenv -p /yourLocalPythonPath/python3.7 rns_sdk_py_env source rns_sdk_py_env/bin/activate pip install -r requirements.txt python setup.py develop python3.7 tests/units/test_resolver_contract.py -v The result that you should see if everything went well is test_addr (__main__.TestResolverConctract) ... ok test_addr_not_set (__main__.TestResolverConctract) ... ok test_has_other_kind (__main__.TestResolverConctract) ... ok test_set_addr (__main__.TestResolverConctract) ... ok test_set_content (__main__.TestResolverConctract) ... ok test_supports_interface (__main__.TestResolverConctract) ... ok test_unsupports_interface (__main__.TestResolverConctract) ... ok ---------------------------------------------------------------------- Ran 7 tests in 1.043s OK Usage and Getting Started In a Python console: from rns_sdk.resolver_contract import ResolverContract…"
 },
 {
  "url": "/rif/rns/tools/RNS-Manager/",
  "title": "RNS Manager",
  "category": "",
  "tags": "rif, rns, rif-name-service, manager, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The RNS Manager is a simple tool that interacts with RNS Smart Contracts via Metamask. It has the following methods: Manage auction with Registrar contract Check domain status with entries Start an auction with startAuction ERC-677 Make a bid with shaBid and newBid Reveal a bid with unsealBid Finalize an auction with finalizeAuction Manage rent payment with Deed contract Check rent status with owner, tokenQuantity, expirationDate and canPayRent Pay the rent with payRent ERC-677 Manage domain ownership with Registry contract Manage owner Manage resolver Manage TTL Manage sub nodes Manage domain resolutions with Resolver contract implementing addr field Resolve a name with addr Change address resolution with setAddr For further information go to the site. This project is open source: fork and PR!"
 },
 {
  "url": "/rif/rns/libs/javascript/RNS-instance/",
  "title": "RNS JS Library - Instance",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Installation npm i web3 @rsksmart/rns Source code: github.com/rnsdomains/rns-js npm: npmjs.com/package/@rsksmart/rns Or just use it directly in your webpage: &amp;lt;script src=&quot;https://unpkg.com/web3@1.2.6/dist/web3.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&quot;https://unpkg.com/@rsksmart/rns@1.5.11/lib/rns.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; Don’t forget to specify the desired version of the package! Instance for queries to RSK Mainnet/Testnet import Web3 from &#39;web3&#39; import RNS from &#39;@rsksmart/rns&#39; const web3 = new Web3(&#39;https://public-node.rsk.co&#39;) // or &#39;https://public-node.testnet.rsk.co&#39; const rns = new RNS(web3) Remember that if you are running the code in a webpage, no import statements are needed, just instantiate the libs made available in the global scope. Instance in Chrome with wallet extension (Metamask) import Web3 from &#39;web3&#39; import RNS from &#39;@rsksmart/rns&#39; if (!window.web3) { throw new Error(&#39;No wallet installed&#39;) } const…"
 },
 {
  "url": "/rif/rns/architecture/RSKResolver/",
  "title": "Rootstock (RSK) Resolver",
  "category": "",
  "tags": "",
  "date": "",
  "desc": "Along the RNS registry and initial registrar there is a public resolver deployed as well (see the RSKResolver contract). This contract is available for anybody to use it, but the only restriction is that only owners of a domain can modify its record in this resolver. This resolver implements all the methods described in the Resolver specification Additionally, it is used as the default resolver configured for new nodes created in the registry. There is an upgraded version of this resolver. See Multi-crypto resolver page. To migrate your resolver, execute the setResolver command on the registry. Mainnet information RSKResolver Adrress: 0x4efd25e3d348f8f25a14fb7655fba6f72edfe93a ABI: RSKResolverABI.json See RNS Testnet section for testing environment information. Index Methods has content setContent Context AbstractRNS rns; rns: the Registry contract Storage mapping(bytes32=&amp;gt;address) addresses; mapping(bytes32=&amp;gt;bytes32) hashes; adresses: for each namehash entry, stores an address hashes:…"
 },
 {
  "url": "/rif/rns/architecture/Registrar/",
  "title": "Registrar",
  "category": "",
  "tags": "rif, rns, rif-name-service, registrar, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ":warning: Deprecated. Find new registrar here. The Registrar is the contract that handles the domain issuing logic. In this section we’ll explain the interaction with this contract. As explained in the RNS specification doc, the domain ownership is determinate by a Vickrey auction. A Vickrey auction is a type of sealed-bid auction. Bidders submit bids without knowing the bided amount of any other participant. The highest bidder is the winner and the price paid is the second-highest bid. Is RNS, the auction lasts 5 days and is divided in two periods: Auction phase: the first 3 days to bid for a specific domain. Reveal phase: the next 2 days for revealing the bids. There is no “soft start” phase, meaning that all names are available on launch time. Registrar mainnet Address: 0x5269f5bc51cdd8aa62755c97229b7eeddd8e69a6 ABI: RegistrarABI.json See RNS Testnet section for testing environment information. Index The process Rent and domain expiration Structure Methods startAuction startAuctions newBid newBidWithToken startAuctionsAndBid unsealBid finalizeAuction payRent &amp;lt;a…"
 },
 {
  "url": "/rif/rns/architecture/Resolver/",
  "title": "Resolver",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The Resolver contract handles the resolution between the name domain and the resource. Each Registry entry references a Resolver. Use one of our resolvers, the Multi-Crypto Resolver, or the Rootstock Resolver. Index Structure Methods supportsinterface addr setAddr Events AddrChanged Structure Context AbstractRNS rns; rns: the Registry contract Storage mapping(bytes32=&amp;gt;address) addresses; mapping(bytes32=&amp;gt;bytes32) hashes; adresses: for each namehash entry, stores an address hashes: for each namehash entry, stores a hash Methods supportsInterface Returns true if the resolver implements the interface specified by the provided hash. This Resolver supports 0x3b3b57de = sha3(addr(bytes32)) 0xd8389dc5 = sha3(content(bytes32)) Signature function supportsInterface(bytes4 interfaceID) public pure returns (bool) Parameters interfaceID: the ID of the interface to check…"
 },
 {
  "url": "/rif/rns/architecture/ReverseRegistrar/",
  "title": "Reverse Registrar",
  "category": "",
  "tags": "rif, rns, rif-name-service, reverse-registrar, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The owner of the addr.reverse domain is a registrar that permits the caller to take ownership of the reverse record for their own address. Mainnet Address: 0xd25c3f94a743b93ecffecbe691beea51c3c2d9d1 ABI: ReverseRegistrarABI.json See RNS Testnet section for testing environment information. Index Methods setName claim claimWithResolver node Methods setName Sets the name record on that name to the specified name. Sets the resolver for the name hex(msg.sender).addr.reverse to a default resolver. Signature function setName(string memory name) public returns (bytes32 node) Parameters name: the name to set for this address. Returns the RNS node hash of the reverse record. claim Transfer ownership of the name hex(msg.sender).addr.reverse. Allows the caller to specify an owner other than themselves. The resulting account has name() resolver. Signature function claim(address owner) public returns (bytes32 node) Parameters owner: the address to set as the owner of the reverse record in RNS. Returns the RNS node hash of the reverse record. claimWithResolver Sets the resolver of the name &amp;lt;code…"
 },
 {
  "url": "/rif/rns/architecture/ReverseSuite/",
  "title": "Reverse suite",
  "category": "",
  "tags": "",
  "date": "",
  "desc": "Reverse RNS records are stored in the RNS hierarchy in the same fashion as regular records, under a reserved domain, addr.reverse. Compatible with EIP-181. Reverse resolving To generate the RNS name for a given account’s reverse records, convert the account to hexadecimal representation in lower-case, and append addr.reverse. For instance, the RNS registry’s address at 0x112234455c3a32fd11230c42e7bccd4a84e02010 has any reverse records stored at 112234455c3a32fd11230c42e7bccd4a84e02010.addr.reverse. function reverseResolve (address) { const reverseName = `${address.slice(2).toLowerCase}.addr.reverse`; const node = namehash(reverseName); const resolver = rns.resolver(node); const name = resolver.name(node); return name; } Ensure a reverse lookup As the owner of the reverse-node is able to set any name as resolution after claiming, it is important to ensure the resulting `name` is used in the forward-resolution. To do so you might query the name&#39;s address resolution.…"
 },
 {
  "url": "/rif/rns/tools/Subdomain-tool/",
  "title": "RNS Manager",
  "category": "",
  "tags": "rif, rns, rif-name-service, sub-domain, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "It’s a sample DApp that could be seen as a component to facilitate the adoption of RNS. Find rns-subdomain-tool and run your standalone app! It shows 2 action flows: Register an alias: invite a final user to register his subdomain under a given domain. Check subdomain status: it will allow the user to check if an alias/subdomain is available or not. :incoming_envelope: You can set the tool up to send an email with a template to the user confirming the registration. :information_source: Also the tool will save information about registrations in a Mongo DB. :raised_hand: This tool includes an option to set up a maximum number of contract calls per hour."
 },
 {
  "url": "/rif/rns/libs/javascript/Utils/",
  "title": "RNS JS Library - Utils",
  "category": "",
  "tags": "rif, rns, rif-name-service, utils, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Available methods isValidDomain isValidLabel isValidTld hasMethod hasAccounts namehash labelhash isValidDomain Validates the given domain syntax. It allows dots and alphanumeric lowercase characters. Signature isValidDomain(domain:string): boolean; Parameters domain: Domain to be validated. Returns bool: true if valid, false if not Examples Valid domain: rns.utils.isValidDomain(&#39;testing123.rsk&#39;).then(console.log) Invalid domain: rns.utils.isValidDomain(&#39;nOtVali-d.rsk&#39;).then(console.log) isValidLabel Validates the given label syntax. It allows alphanumeric lowercase characters. Signature isValidLabel(label:string): boolean; Parameters label: Label to be validated. Returns bool: true if valid, false if not Examples Valid label: rns.utils.isValidLabel(&#39;testing123&#39;).then(console.log) …"
 },
 {
  "url": "/rif/rns/tools/Web3/",
  "title": "Web3",
  "category": "",
  "tags": "rif, rns, rif-name-service, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "To use web3 and interact with the contracts, we must instance web3 with a provider. To do so we can use Rootstock (RSK) public nodes: var Web3 = require(&#39;web3&#39;) var web3 = new Web3() web3.setProvider(new web3.providers.HttpProvider(config.node)) RNS Registry Instance the RNS Registry contract: const rnsAbi = [] const rnsAddress = &#39;&#39; var rnsInstance = web3.eth.contract(rnsAbi) var rns = registryInstance.at(rnsAddress) And include namehash library: var namehash = require(&#39;eth-ens-namehash&#39;).hash domain field does include .rsk suffix Further reading: RNS Registry contract. Change the resolver function setResolver(domain, newResolver) { var hash = namehash(domain)…"
 },
 {
  "url": "/guides/armadillo/about/",
  "title": "Armadillo - About",
  "category": "",
  "tags": "armadillo, guard, security, guides, bitcoin, rsk, peer-to-peer, merged-mining, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/gateways/dataservices/chainlink/about/",
  "title": "RIF Gateways Chainlink",
  "category": "",
  "tags": "rif, gateways, data services, chainlink",
  "date": "",
  "desc": "About Chainlink Chainlink is a decentralized oracle network that helps resolve connectivity issues with smart contracts, enabling users to build blockchain-based smart contracts that securely access off-chain data feeds, web APIs, and traditional bank payments. By doing so, Chainlink transforms the role that smart contracts can play in a vast number of sectors, including financial services, insurance, and supply chain. Chainlink provides highly secure and reliable oracles to large enterprises (Google, Oracle, and SWIFT) and leading smart contract development teams such as Polkadot/Substrate, Synthetix, Loopring, Aave, OpenLaw, Conflux, and many others. Learn more by visiting the Chainlink website."
 },
 {
  "url": "/rif/gateways/triggers/notifier/about/",
  "title": "RIF Notifier",
  "category": "",
  "tags": "rif, notifier",
  "date": "",
  "desc": "About RIF Notifier RIF Notifier is a software service that listens to events on the Rootstock (RSK) blockchain and notifies its subscribers. RIF Notifier sends notifications to active subscribers for the following events in the Rootstock blockchain Contract events New Transactions New Blocks RIF Notifier also sends notifications to Lumino clients for following events in the Rootstock blockchain for registered Lumino tokens. ChannelOpened ChannelClosed RIF Notifier offers the following notification methods to its subscribers. These notification methods are subject to availability at the given RIF notifier provider. SMS EMAIL API RIF Notifier at its core serves as an interface between the Rootstock blockchain and the external world. Multiple provider nodes can provide notification services and these provider nodes can be registered with RIF Marketplace so end users can create subscription. Any events in the blockchain are instantly communicated to the users via their requested preferences. RIF Notifier users can also get a list on RNS addrChanged events and chainAddrChanged events from multi chain contract."
 },
 {
  "url": "/rif/identity/about/",
  "title": "About",
  "category": "",
  "tags": "rlogin, rif, rif-identity, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "IOV Labs site: iovlabs.org RIF site: rifos.org RIF Identity landing: rifos.org identity Repos: repo list"
 },
 {
  "url": "/rif/identity/mvp/acknowledgements/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The MVP - Acknowledgements Most of the acknowledgements about bad-use, bugs or features to be upgraded are found in each repo’s issues. The applications, services and libraries were audited. This is the report: We identified the following areas for the improvement of RIF Identity security, we recommend prioritizing the fixes for issues 1 and 2: Holder app: Mnemonic and private key are stored on the local database without encryption, currently it’s using a ‘dummybox’ with a hardcoded secret that does not encrypt at all. Consider using this library to store the secrets and to avoid implementing your own cryptographic functions. The authentication flow in express-did-auth allows relay attacks, this means that, for example: the Convey service can force the client (mobile app) to sign a challenge for the credential request service or vice versa. Currently, the client includes the server’s DID as subject (JWT sub) on the challenge response. However, this subject is not verified on the server when processing the challenge response. The getAuthToken() must verify that the subject included on the challenge response matches the DID of the service. Holder app: Deprecated crypto library uses a static IV to…"
 },
 {
  "url": "/guides/two-way-peg-app/advanced-operations/",
  "title": "Advanced Operations | 2 way peg app Documentation",
  "category": "",
  "tags": "2 way peg, powpeg, peg-in, peg-out, 2way-peg, bridge, rbtc, btc, testnet, mainnet, guide, setup, integrate, use",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/guide/advanced/",
  "title": "Advanced operations - RNS User guide",
  "category": "",
  "tags": "rns, guide, rns-user-guide",
  "date": "",
  "desc": "How to change the controller of the domain, change the resolver of the domain, add a record, update a record, remove a record, enable reverse resolution lookups, disable reverse resolution lookups"
 },
 {
  "url": "/rif/gateways/triggers/notifier/api/",
  "title": "RIF Notifier API",
  "category": "",
  "tags": "rif, notifier, api",
  "date": "",
  "desc": "You can access the RIF notifier REST API through the available endpoints. The available endpoints can be accessed through swagger using the link http://localhost:8080/swagger-ui.html Below is a summary of the available endpoints. Get Subscription Plans Subscribe to Plan Renew Subscription Subscription and Renewal Response Other available endpoints Retrieve notifications Get subscriptions Get Lumino tokens Subscribe to specific open channel Subscribe to close channel Subscribe to all open channels Get chain addresses events Health Check Get Subscription Plans The endpoint http://localhost:8080/getSubscriptionPlans can be used to get a list of subscription plans along with the accepted currencies and the price in each currency. Optionally activePlans=true parameter can be sent to retrieve only the active subscription plans. Subscribe to Plan Run the command notifier-cons-cli subscribe to subscribe to a plan Renew Subscription Run the command notifier-cons-cli renew to renew existing subscription Subscription and Renewal response As part of the subscription and renewal response a hash of the subscription along with the signature is returned. The hash can be used to identify…"
 },
 {
  "url": "/solutions/api3/",
  "title": "API3 - Solutions on RSK",
  "category": "",
  "tags": "API3, rsk-solutions, rsk, bitcoin, defi, dApps, blockchain, node, smart-contracts, oracles",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/communication/architecture/",
  "title": "Architecture",
  "category": "",
  "tags": "rif, rif-communication, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RIF Communication consist of 3 distinct layers (from the top to the bottom as shown in the figure below): User facing layer Developer facing layer Routing network layer Let’s discuss a each layer in greater detail. User facing layer The user facing layer contains services that are using the RIF Communication protocol and libraries. This layer will contain mostly 3rd party solutions as we are focused on building the infrastructure layers. However, we are building 3 services that we see as necessary for the success of the platform. RIF Communication Gateways allows users, for a small fee, to interact with RIF Communication network without the need of operating node while allowing gateway operators to profit. This is a service open to 3rd parties to operate and has some privacy caveats. The Mailbox service gives users to receive messages even if they are not online. It is similar to real world mailbox service and as such it also has privacy trade-offs. Mailbox services will be listed on RIF Marketplace. Node operators can use Node manager to monitor their communication instances and understand the utilization of their service. Developer facing layer …"
 },
 {
  "url": "/rif/gateways/dataservices/chainlink/architecture/",
  "title": "RIF Gateways Chainlink Architecture",
  "category": "",
  "tags": "rif, gateways, data services, chainlink, architecture",
  "date": "",
  "desc": "When a Chainlink request is created, a Consumer contract sends an on-chain transaction to an Oracle Contract within the Rootstock (RSK) blockchain. That transaction transfers payment tokens, along with the data representing your request. The Oracle Contract tracks balances from requesters and emits an event which notifies the off-chain Chainlink network (via the External Initiator), that this event needs to be processed. Once the request is received, Chainlink performs the work of the request and returns the answer to the Oracle contract (via the External Adapter). The Oracle Contract updates the balance to pay the node operator and returns the result to the Consumer Contract. The following diagram presents the Chainlink/Rootstock integration architecture and core components: Core Components: External Data Chainlink node External Adapter External Initiator External Data External data may represent an API, whether open or private, another blockchain, network, or any repository of data that would need to be read or written to. In the diagram above is represented by an Exchange RPC API which returns for example a currency conversion rate. Chainlink Node The Chainlink node handles jobs, tasks, scheduling, and signing transactions for…"
 },
 {
  "url": "/rif/gateways/triggers/notifier/architecture/",
  "title": "RIF Notifier Architecture",
  "category": "",
  "tags": "rif, notifier, architecture",
  "date": "",
  "desc": "Contents Overview Marketplace Lumino Overview RIF Notifier at its core is composed of listeners that listen for events in Rootstock (RSK) blockchain and notification services that send notifications on blockchain events to the outside world. Users interact with RIF Notifier through two main services RIF Marketplace RIF Lumino Client Notifier Marketplace Interaction RIF notifier provider registers with marketplace as a provider. The providers and their specified currency tokens are whitelisted by the marketplace. RIF marketplace gets the available subscription plans from the RIF notifier providers and presents to the customer. RIF marketplace sends a request to selected RIF notifier provider with the user selected subscription plan to create or renew a subscription with the topics and notification preferences. RIF notifier activates the subscription upon receipt of payment in notifier smart contract in Rootstock (RSK) blockchain. RIF notifier listens to Rootstock (RSK) network for the selected topics and send notifications. RIF notifier sends the notification based on selected notification preferences (SMS, EMAIL, API) for the user subscription. Notifier Lumino Interaction RIF notifier listens to the token network registry for new tokens and registers the…"
 },
 {
  "url": "/rif/identity/manager/architecture/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, rif-identity-manager, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RIF Identity Manager - design &amp;amp; architecture WIP"
 },
 {
  "url": "/rif/identity/mvp/architecture/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The MVP - Design &amp;amp; Architecture The product is designed in 5 layers Applications layer User interfaces letting users form part of the model Ministry of Transport app Citizens app Police officers app Services layer W eb services built to enable communication and interaction between actors Issuer service - allows receiving credential issuance requests and approving them manually Convey service - Public transport layer for JWTs using IPFS Data Vault - This service uses an IPFS node to pin files (POC implementation - productive implementation documentation here) The libraries Reusable and secure implementations compliant with the design protocols Mnemonics - identity derivation tools using mnemonic phrases RSK DIDs - handle Ethr DID method procedures in Rootstock (RSK) network Ethr DID - uPort ethr-did with Rootstock (RSK) support DAF bindings - use uPort agent with RIF identity multi identity model VC Core module - Verifiable Credentials in React.js + Redux Express DID Auh - Express middleware to authenticate users using DIDs and VCs (POC implementation - - productive implementation documentation &amp;lt;a…"
 },
 {
  "url": "/rif/marketplace/architecture/",
  "title": "RIF Marketplace Architecture",
  "category": "",
  "tags": "rif, marketplace, architecture",
  "date": "",
  "desc": "The RIF Marketplace at its core is composed of a set of smart contracts deployed on the Rootstock (RSK) blockchain, a read-only cache for performance and scalability, and a front-end (UI) which allows users to easily connect, browse available services and features, and interact with other participants. Each specific RIF service node (RIF Services) must connect to the Marketplace Smart Contracts, listen for the required events, and ensure a proper interaction and provision of that service to the End-user. The diagram below shows an overview of the RIF Marketplace architecture, which is explained next: RIF Marketplace is built around 3 core components: UI-Frontend Dapp Cache Smart Contracts UI-Frontend Dapp End-Users interact with the RIF Marketplace through the main Marketplace Dapp (RIF Marketplace UI). This web application presents information about the service categories available, allows users to browse/search for specific providers, and allows providers and consumers to engage in service agreements. It also allows Providers to register their offered services and track their performance and current customers, manage their staking, among other functionalities. Cache The information presented in the UI comes from RIF Marketplace Cache. This component is…"
 },
 {
  "url": "/rif/relay/architecture/",
  "title": "RIF Relay Architecture",
  "category": "",
  "tags": "rif, relay, rsk, envelope, architecture",
  "date": "",
  "desc": "Table of Contents Glossary On-Chain components Relay Hub Smart Wallet Relay Manager Stake Manager Relay Worker Relay &amp;amp; Deploy Verifier Collector Proxies Template Proxy Factory Proxy GSNEip712Library Off-Chain components Relay Server Start Flow Register Flow Interval Handler Relay &amp;amp; Deploy Requests Tools Contract Interactor Relay Client Relay Provider Execution flow Relaying (Smart Wallet already deployed) Sponsored Smart Wallet deployment Deprecated Paymaster Introduction The RIF Relay system is designed to achieve transaction sponsorship at a low cost. The cost of the relay service provided by the “sponsors” is agreed upon among the parties off-chain. The low cost of transactions on Rootstock (RSK) contributes to keeping overall service costs low as well. The RIF Relay system is made up of various components, some of which are essential and others which are auxiliary. An overview of this is as follows: On-chain, the system cannot work without its Smart Contracts,…"
 },
 {
  "url": "/rif/storage/architecture/",
  "title": "storage/architecture",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RIF Storage consist of 3 distinct layers (from the top to the bottom as shown in the figure below): User facing layer Developer facing layer Storage layer User facing layer The user facing layer contains services that are using the RIF Storage protocol and libraries. As we are focused on building the infrastructure layers, this layer will contain mostly 3rd party solutions. However, we are building 3 services that we see are necessary for success of the platform: RIF Storage Gateways allows users to interact with RIF Storage for a small fee, without the need of an operating node while allowing gateway operators to profit. This is a service open to 3rd parties to operate. The Pinning service gives any storage provider the opportunity to guarantee persistance of files and be rewarded for the service. Pinning services will be listen on RIF Marketplace. Node operators can use Node manager to monitor their storage instances and understand the utilization of their service. Developer facing layer We are providing dApp developers a unified API allowing them to seamlessly utilize any of the supported storage providers or even switch…"
 },
 {
  "url": "/rif/rlogin/authentication/",
  "title": "rLogin - integrated backend authentication",
  "category": "",
  "tags": "rlogin, rif, rif-identity, web3, react, frontend, dapp, metamask, ledger, trezor, dcent, liquality, portis",
  "date": "",
  "desc": "rLogin - integrated backend authentication - how to use the rLogin with an authentication model based on the user&#39;s digital signature capabilities"
 },
 {
  "url": "/solutions/babelfish/",
  "title": "BabelFish - Solutions on RSK",
  "category": "",
  "tags": "babelfish, rsk-solutions, rsk, token, defi, dApps, blockchain, smart-contracts, stablecoins, bitcoin",
  "date": "",
  "desc": ""
 },
 {
  "url": "/solutions/defiant/bahasa/",
  "title": "Defiant - Solutions on RSK",
  "category": "",
  "tags": "defiant, rsk-solutions, rsk, bahasa-indonesia",
  "date": "",
  "desc": ""
 },
 {
  "url": "/solutions/kriptonmarket/bahasa/",
  "title": "Pasar Kripton - Solusi jalan masuk dan keluar dalam RSK",
  "category": "",
  "tags": "kripton-market, defi, exchange, crypto, buy, rsk-solutions, rsk, on-ramp, off-ramp, bahasa-indonesia",
  "date": "",
  "desc": ""
 },
 {
  "url": "/solutions/beexo/",
  "title": "Beexo - Solutions on RSK",
  "category": "",
  "tags": "beexo, rsk-solutions, rsk, wallet, bitcoin, defi, dApps, blockchain, cryptowallet",
  "date": "",
  "desc": ""
 },
 {
  "url": "/courses/blockchain-developer/",
  "title": "Rootstock Blockchain Developer Course",
  "category": "",
  "tags": "rsk, faqs, help, support, course, rootstock, ambassador-program",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tools/explorer/blockscout/",
  "title": "Blockscout",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tools/truffle/boxes/",
  "title": "Truffle Boxes",
  "category": "",
  "tags": "truffle, ganache, quick-start, dapps, start-box, truffle-boxes, open zeppelin, testing, networks, deployment, npm, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, guides, tutorial",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/guide/brave/",
  "title": "Connect Brave to the Rootstock (RSK) Network - RNS User guide",
  "category": "",
  "tags": "rns, guide, rns-user-guide",
  "date": "",
  "desc": "How to locate Brave&#39;s Wallet, connect to the Rootstock (RSK) Mainnet and Testnet, get your Rootstock account address, add the RIF token"
 },
 {
  "url": "/guides/quickstart/browser/",
  "title": "RSK Quick Start Guide | Using RSK in the Browser",
  "category": "",
  "tags": "quick-start, getting-started, guide, how-to, bitcoin, rsk, peer-to-peer, merged-mining, blockchain, powpeg",
  "date": "",
  "desc": ""
 },
 {
  "url": "/contribute/bug-bounty-program/",
  "title": "Bug Bounty Program",
  "category": "",
  "tags": "rsk, rif, bounty, security",
  "date": "",
  "desc": "IOVLabs has created this bug bounty program to reward security researchers that dedicate time and effort to improve the IOVLabs platforms. Bug Bounty Program"
 },
 {
  "url": "/kb/build-with-tenderly/",
  "title": "Build, Monitor and Troubleshoot Your Smart Contracts on RSK with Tenderly",
  "category": "",
  "tags": "knowledge-base, rif token, rsk, tenderly, smart contracts",
  "date": "",
  "desc": ""
 },
 {
  "url": "/solutions/bullanetwork/",
  "title": "Bulla Network - Solutions on RSK",
  "category": "",
  "tags": "Bulla Network, rsk-solutions, rsk, wallet, bitcoin, defi, dApps, blockchain, cryptowallet, bullabanker",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/calendar.ical",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/solutions/chainbeat/",
  "title": "Chainbeat - Solutions on RSK",
  "category": "",
  "tags": "defiant, rsk-solutions, rsk",
  "date": "",
  "desc": ""
 },
 {
  "url": "/solutions/chainlink/",
  "title": "Chainlink - Solutions on RSK",
  "category": "",
  "tags": "chainlink, rsk-solutions, rsk, bitcoin, defi, dApps, blockchain, node, smart-contracts",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/identity/data-vault/architecture/client/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, data-vault, architecture, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Data vault - Centralized pinner client A Web Client to simplify the way the services provided by the IPFS Centralized Data Vault Service are consumed. Features Manage authentication according to the DID Auth protocol CRUD operations over the RIF Data Vault Stores the authentication credentials in the given storage Encrypts/decrypts data prior to save/return using the user wallet provider Usage Instantiate The package expose a DataVaultWebClient class that receives a Config object when it is instantiated. The Config object has the following fields: serviceUrl: string: the IPFS Centralized Data Vault Service url authManager?: AuthManager: the authentication manager. Please find instructions on how to instantiate it below. encryptionManager: EncryptionManager: the encryption manager. Please find instructions on how to instantiate it below. import DataVaultWebClient from &#39;@rsksmart/ipfs-cpinner-client&#39; const serviceUrl = &#39;http://your-ipfs-cpinner-service.com&#39; // the following fields are required just to perform write operations const serviceDid = &#39;did:ethr:rsk:0x123456789....abc&#39; const address = &#39;0xabcdef....123&#39; // user&#39;s address const did &amp;lt;span…"
 },
 {
  "url": "/solutions/coinfirm/",
  "title": "Coinfirm - Solutions on RSK",
  "category": "",
  "tags": "coinfirm, rsk-solutions, rsk, bitcoin, defi, dApps, blockchain, node, smart-contracts, oracles",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/compile-smart-contracts-go/",
  "title": "Compile Smart Contracts to Go",
  "category": "",
  "tags": "go, rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/nft/configure-nft-metadata/",
  "title": "Configure NFT metadata | Write and Deploy an NFT project on the RSK Testnet",
  "category": "",
  "tags": "NFTs, tutorial, overview, guides, tokens, web3, bitcoin, rsk, peer-to-peer, blockchain, nft, ERC-721, smart-contract, hardhat, ethersjs, ipfs, metamask, testnet, pinata",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/configure-truffle-to-rsk/",
  "title": "How to configure Truffle to connect to RSK",
  "category": "",
  "tags": "knowledge-base, truffle, rsk, javascript",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/storage/providers/swarm/configure/",
  "title": "Running Configurations for Swarm",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Use the following cheatsheet to run Swarm with the desired capabilities. For a full list of the available command line options for swarm, see here. Table of Contents RNS Resolution ENS Resolution Incentivization • RNS Resolution You can resolve RNS addresses by specifying the RNS Resolver Smart Contract to use through the rns-api flag. For example: swarm --rns-api 0x99a12be4C89CbF6CFD11d1F2c029904a7B644368@https://public-node.rsk.co In this example: 0x99a12be4C89CbF6CFD11d1F2c029904a7B644368 is the address for the RNS Resolver contract. https://public-node.rsk.co is the Rootstock (RSK) blockchain endpoint to be used when interacting with the contract. • ENS Resolution Swarm cannot resolve ENS addresses by itself; it needs to delegate this task. There are 2 ways to do this. Through Geth The easiest way to do this is to run a Geth node locally and let Swarm make calls to this instance when attempting to resolve addresses. Run Geth through the geth command (to install Geth, follow these instructions). Leave the node running long enough so that it’s in-sync with the blockchain. Tip: save resources by running Geth in light mode: &amp;lt;div…"
 },
 {
  "url": "/guides/rlogin/connect-frontend/",
  "title": "Build a DApp with rLogin - Part 1: Connect Frontend",
  "category": "",
  "tags": "rLogin, frontend, backend, dapp, tutorial, overview, guides, smart-contracts, web3, bitcoin, rsk, peer-to-peer, dapp-examples, blockchain, auth, libraries",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tools/tokenbridge/contractaddresses/",
  "title": "Addresses and Links",
  "category": "",
  "tags": "address, erc20, defi, decentralized, token-bridge, tokens, addresses, bridge, multisig, federation, quick-start, guides, tutorial, testnet, faucet, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, sidechain, contracts",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/multisig/contracts/",
  "title": "RIF Multisig Architecture - Safe Contracts",
  "category": "",
  "tags": "rif, multisig, gnosis, smart-contracts, solidity",
  "date": "",
  "desc": "use this set of smart contracts to create multi-signature wallets"
 },
 {
  "url": "/rif/relay/contracts/",
  "title": "RIF Relay - Contracts",
  "category": "",
  "tags": "rif, relay, rootstock, rsk, envelope, mainnet, testnet, contract",
  "date": "",
  "desc": "Mainnet Version 1 Primary contracts Contract Address Penalizer 0x4fd591b8330d352c57CA1CC1dA172dCa516722E3 RelayHub 0x438Ce7f1FEC910588Be0fa0fAcD27D82De1DE0bC SmartWallet 0x59C40304E8a428BF1D17f03a6aE84B635964DB19 SmartWalletFactory 0x9EEbEC6C5157bEE13b451b1dfE1eE2cB40846323 DeployVerifier 0x2FD633E358bc50Ccf6bf926D621E8612B55264C9 RelayVerifier 0x5C9c7d96E6C59E55dA4dCf7F791AE58dAF8DBc86 For CustomSmartWallet support Contract Address CustomSmartWallet 0x4b2464E8d062633D18ba0928c064037Da415eD1f CustomSmartWalletFactory 0x0002E79883280C1717e41EE5D3705D55960B5bAe CustomSmartWalletDeployVerifier 0x5910868059431026ACa58a73124DedbEF4cb97db CustomSmartWalletRelayVerifier 0xb6eFDB335b4D52705e9973069500fd79410BEC01 For Testing purposes Contract Address SampleRecipient 0x479eA66AAEfC00EdC1590c9da07152def9452cf9 TestToken 0xe49b8906A3ceFd184621A4193e2451b1c3C3dB0B Testnet Version 1 Primary contracts Contract Address Penalizer 0x8e67406bD3A926b43Fda158C673230B77f874CDd RelayHub 0xAd525463961399793f8716b0D85133ff7503a7C2 SmartWallet 0x86bD3006B757614D17786428ADf3B442b2722f59 SmartWalletFactory 0xCBc3BC24da96Ef5606d3801E13E1DC6E98C5c877 DeployVerifier 0xc67f193Bb1D64F13FD49E2da6586a2F417e56b16 RelayVerifier 0xB86c972Ff212838C4c396199B27a0DBe45560df8 For CustomSmartWallet support Contract Address CustomSmartWallet 0x2c66922D704999Ff9F378838172fe5c5e0Ac2d27 CustomSmartWalletFactory 0x91C186Dcb11EcBf234c778D7779e8e10f8ADD1a8 CustomSmartWalletDeployVerifier 0x87421afb27FC680D99E82Bce8Df140E81F5c11a3 CustomSmartWalletRelayVerifier 0x6e23B72723886b066a5C26Baa2b2AfB0b1d51e5c For Testing purposes Contract Address SampleRecipient 0xc4B8B6C02EC34d84630Ba8C684954a0A04C656FC TestToken 0x3F49BaB0afdC36E9f5784da91b32E3D5156fAa5C Version 0.2 Primary contracts Contract Address …"
 },
 {
  "url": "/rif/scheduler/contracts/",
  "title": "RIF Scheduler - Contracts",
  "category": "",
  "tags": "rif, rif-scheduler, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Repo: rsksmart/rif-scheduler-contracts Each service provider should deploy a smart contract to manage the plans, receive payments for the service and execute the requested transactions. The smart contract has four modules: Admin: The Service Provider can create new plans and change withdraw account Purchasing: The requestors can use these methods to pay for the service using tokens Scheduling: Requestors submit the transactions they need to execute and when Execution: Service Provider executes transactions and receives payment See this guide about how to run a scheduler on your own. Admin The Service Provider can set up different plans. The plans must specify the: Price per execution, The time window (in seconds) within a scheduled execution should run. The maximum amount of gas the internal call can spend The price of the plan strongly depends on these last two values We recommend a value more than 15 seconds. This value will depend strongly on the service configuration. For example, if the time window for a plan is set to 100, then this following condition should apply, otherwise the execution will not performed: scheduled time - 10 &amp;lt;=…"
 },
 {
  "url": "/rif/identity/contribute/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, beta, build, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, develop, git, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RIF Identity Git approach Strongly based on the branching model proposed by Vincent Driessen. Also named Gitflow in this article. It is a strict branching model that refers to two main branches: master (or main) and develop (or dev). Quick summary Pull requests should point to develop by default - other cases are explained bellow master (or main) has latest release - deployment or package distribution develop has latest approved feature - feature was reviewed and approved, but not yet released as final (they may have been released as beta versions) Thanks for collaborating and contributing! Main branches All the code that is in master (or main) is code that is productive code: it means it is deployed or published as an NPM package. In our case, sometimes the release gets delayed due to some external dependencies, so we can assume that if the code is in master, it is ready to be delivered. The code present in develop is part of the current work and, in most of the cases, is the immediate release, so it may be deployed or published as…"
 },
 {
  "url": "/rif/identity/mvp/services/convey-service/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, service, jwt, ipfs, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Convey service - Public transport layer for JWTs using IPFS Large contents don’t fit in QR codes so this service is designed to receive an encrypted file, store it in IPFS and also store the file in memory. It returns the cid of the stored file and a convey-uri that indicates that this kind of files should be gotten from a convey service implementation Read the running guide to run the whole project or browse the open-source repo to run locally (please use tag v0.1.0) Find the protocol specification here. Main flows The Convey service has been built to act as a content relayer in front of IPFS. Let’s imagine that Bob wants to share a JWT with Alice through a QR code. If the content is too large, it will not fit in a QR code, so there is where the Convey service acts. It allows to transport and caché files that can be accessed via HTTPS, and provides a tiny URL that can fit in any QR code. The service exposes two main endpoints: POST and GET files. Please refer to the protocol description here for more details about it. &amp;lt;h4…"
 },
 {
  "url": "/rif/identity/specs/convey-service/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Convey service Transport content that does not fit into a QR code A very common functionality nowadays is to allow the user to present their credentials using QR codes. Verifiable credentials can use much space and make the code unable to be displayed on phone screens or scanned by cameras. With that motivation, this protocol is designed to allow transporting a message between two parties, with a third party in the form of a relayer. Alice: wants to share a file with Bob showing a QR code Bob: wants to read the file using a QR code scanner Convey service: cachés and publishes files into IPFS Send a message: Alice encrypts (symmetric) the file and saves the secret key Alice sends the encrypted file to the Convey service The Convey service receives the file and stores it in IPFS, cachés a copy, and sends the CID (content identifier) of the file to Alice Alice receives the CID and verifies it, comparing with the expected CID Alice gets CID and shares a QR with Bob containing the uri convey://v1/QmPChd2hVbrJ6bfo3WBcTW4iZnpHm8TEzWkLHmLpXhF68A#secretKey Alice shows a QR code for this URI Resolve a message: Bob scans the…"
 },
 {
  "url": "/rif/identity/libraries/core/",
  "title": "",
  "category": "",
  "tags": "rlogin, core, rif, rif-identity, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RIF Identity Core Implementation of RIF Identity protocols using DAF agent Repo: https://github.com/rsksmart/rif-identity.js/tree/develop/packages/rif-id-core"
 },
 {
  "url": "/solutions/covalent/",
  "title": "Covalent - Solutions on RSK",
  "category": "",
  "tags": "covalent, rsk-solutions, rsk, troubleshooting, defi, dApps, blockchain, smart-contracts, API, data-points, indexing, query",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/create-a-collectable-token/",
  "title": "Create your own collectable token on RSK network",
  "category": "",
  "tags": "tutorial, rsk, token, openzeppelin, erc721, truffle, frontend, web3, react",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/create-a-token-02/",
  "title": "Create a token - other approach",
  "category": "",
  "tags": "tutorial, rsk, token, openzeppelin, erc20, truffle",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/create-a-token/",
  "title": "Create your first token",
  "category": "",
  "tags": "tutorial, rsk, token, openzeppelin, erc20, truffle",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/nft/create-smart-contract/",
  "title": "Create a Smart Contract | Write and Deploy an NFT project on the RSK Testnet",
  "category": "",
  "tags": "NFTs, tutorial, overview, guides, tokens, web3, bitcoin, rsk, peer-to-peer, blockchain, nft, ERC-721, smart-contract, hardhat, ethersjs, ipfs, metamask, testnet, pinata",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/multisig/sdk/creation/",
  "title": "RIF Multisig SDK - creation",
  "category": "",
  "tags": "rif, gnosis, multisig",
  "date": "",
  "desc": "Multisig account creation"
 },
 {
  "url": "/rif/identity/specs/credential-requests/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, credential, request, self-sovereign, DID, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Verifiable credential requests protocol A simple protocol for request, grant and receive verifiable credential case Users can build their self-sovereign identity by interacting with different services that grant them verifiable credentials. Both users and services are identified with decentralized identities (DIDs), and can issue and receive verifiable credentials (“credentials”). The credentials are cryptographically signed, this guarantees non repudiation, issuer authenticity, data integrity and allows the holder of the credential to present it to other entities. This protocol is held by two entities: the issuer and the holder. The issuer is a public entity that issues a specific type of credential, the holder is a user who wishes to acquire that credential and controls a certain DID. The issuer may require the holder to share specific information. This information can be either data input by the user in a declarative way (declarative details) or other credentials issued by the same issuer or another entity. One important aspect considered is that the holder has an application were they can confirm or reject information sharing. The application must display clear explanation of the information that is going to be shared and the user must be able to accept it with “manual”…"
 },
 {
  "url": "/guides/get-crypto-on-rsk/cryptocurrency-vs-token/",
  "title": "The Difference between a Cryptocurrency and a Token",
  "category": "",
  "tags": "knowledge-base, tokens, rsk, smart contracts, cryptocurrency",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/identity/libraries/daf/",
  "title": "",
  "category": "",
  "tags": "rlogin, uport, daf-bindings, rif, rif-identity, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "uPort DAF bindings Use uPort agent with RIF identity multi identity model Repo: https://github.com/rsksmart/rif-identity.js/tree/develop/packages/rif-id-daf"
 },
 {
  "url": "/tools/tokenbridge/dappguide/",
  "title": "Token Bridge Dapp Guide",
  "category": "",
  "tags": "erc20, bridge, defi, decentralized, token-bridge, tokens, quick-start, testnet, networks, dapps, tools, rsk, ethereum, smart-contracts, guides, tutorial, install, get-started, how-to",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/aggregation/dapps/",
  "title": "RIF Aggregation - Dapps",
  "category": "",
  "tags": "rif, aggregation, zksync",
  "date": "",
  "desc": "RIF Aggregation dapps ported on Rootstock (RSK)"
 },
 {
  "url": "/rif/identity/mvp/services/data-vault/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, service, data-vault, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "This is a proof-od-concept implementation of the RIF Data Vault. The current implementation documentation can be found [here](/rif/identity/data-vault) Data Vault - user-centric cloud storage service A Data vault First approach. This service uses an IPFS node to pin files. After the store process the holder can verify the file was uploaded accessing to IPFS. When a recovery is required, the server will response all the CIDs of the files that were ever stored by the DID, the DID holder can then retrieve the files from IPFS. To maintain this flow a local DB maps DIDs to CIDs. Alert: anyone in possession of a DID can used the server to upload files, now it has just file-size restrictions Read the running guide to run the whole project or browse the open-source repo to run locally (please use tag v0.1.0)"
 },
 {
  "url": "/solutions/dcent/",
  "title": "DCent - Solutions on RSK",
  "category": "",
  "tags": "DCent, rsk-solutions, rsk, wallet, bitcoin, defi, dApps, blockchain, cryptowallet",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/storage/providers/swarm/guides/debugging/",
  "title": "Debugging Swarm",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "1. Open the swarm project Load the entire Swarm project into your favorite IDE. The default location should be $GOPATH/src/github.com/ethersphere/swarm. 2. Alter the main function Locate the main() function, under swarm/cmd/swarm/main.go. This function is called when starting Swarm through the swarm terminal command, therefore its arguments must be injected, like so: func main() { // injection of swarm arguments options := []string{ &quot;--bzzaccount=0x2f1cd699b0bf461dcfbf0098ad8f5587b038f0f1&quot;, &quot;--password=/home/usr/password.txt&quot;, // other CLI arguments here... } args := append(os.Args, options...) if err := app.Run(args); err != nil { fmt.Fprintln(os.Stderr, err) os.Exit(1) } } Each of the elements in the options array holds a swarm command option and its value, in the --option=value form. Replace the example with your own values, and add or remove any flag as needed. For a full…"
 },
 {
  "url": "/rif/identity/definitions/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, seed, mnemonics, key, persona, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Definitions RIF Identity Account (RIA): is a free account that is held by any mnemonic phrase holder Mnemonic phrase: a phrase of words that is securely random created and can be used to obtain a seed from it Seed: secret entropy that is used to derive private keys HD Key: a cryptographic system that allows to derive private keys from a seed Persona: is the representation of each of the identities that are derived from a RIF Identity Account"
 },
 {
  "url": "/rif/rns/architecture/definitive-resolver/",
  "title": "Resolver",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RSK Mainnet: 0xD87f8121D44F3717d4bAdC50b24E50044f86D64B RSK Testnet: 0x25C289ccCFFf700c6a38722F4913924fE504De0e Repo: rnsdomains/rns-resolver Features Supported resolution protocols: Contract addresses - EIP-137 Multicoin addresses - EIP-2304 Contenthash - EIP-1577 Contract ABI - EIP-205 SECP256k1 public keys - EIP-619 Text records - EIP-634 Interface discovery - EIP-1844 Architecture: Upgradeable contracts using OpenZeppelin Upgrades. Use setAuthorisation to enable others set your records. Use multicall to perform multiple operations in one call/transaction. Public methods Resolution protocols Contract and multicoin addresses: addr and setAddr Contenthash: contenthash and setContenthash Contract ABI: abi and setAbi SECP256k1 public keys: pubkey and setPubkey Text records: text and setText Interface discovery: interfaceImplementer and setInterfaceImplementer Administrative Authorisations: authorisations, setAuthorisation and isAuthorised Multiple calls: multicall Authorisations Any account can set an authorisation for any name, but the authorisation that is checked will be that of the current owner of a name. Thus, transferring a name effectively clears any existing authorisations, and new authorisations can be set in advance of…"
 },
 {
  "url": "/guides/nft/deploy-nft-on-rsk/",
  "title": "Deploy NFT on RSK | Write and Deploy an NFT project on the RSK Testnet",
  "category": "",
  "tags": "NFTs, tutorial, overview, guides, tokens, web3, bitcoin, rsk, peer-to-peer, blockchain, nft, ERC-721, smart-contract, hardhat, ethersjs, ipfs, metamask, testnet, pinata",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/deploy-smart-contracts/",
  "title": "Deploy Smart Contracts",
  "category": "",
  "tags": "rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/rif-relay/deployment/",
  "title": "RIF Relay Deployment",
  "category": "",
  "tags": "rif, envelope, relay, user, guide, deployment",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rlogin/design-and-architecture/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "rLogin - Design &amp;amp; Architecture The objective of rLogin project is to build a set of libraries that enables users to use their crypto wallets to authenticate, store their data and port it across different applications. Developers can user rLogin project to enable Self-sovereign identity in their applications in an easy and intuitive way. The rLogin design consists of 4 core modules: A back-end authentication library A cloud storage service where users can store their credentials A standard interface for Verifiable Credentials enabling data portability A client library combining authentication against back-end using user’s wallet and store credentials A) back-end authentication library Most applications have a backend, which defines the application model and an interface to interact and collaborate with the model. Users must be authenticated, that is, they must be authorized to use this model. Today one of the most used authentication methods are Google Identity or Facebook Login. A user of our application is recognized as such by having a Google or Facebook account. Google and Facebook will tell us the data that the user authorizes to share, such as their name or email.…"
 },
 {
  "url": "/guides/flyover/design-architecture/",
  "title": "Flyover Protocol Documentation | Design and Architecture",
  "category": "",
  "tags": "flyover, powpeg, peg-in, peg-out, 2way-peg, bridge, rbtc, btc, testnet, mainnet, guide, setup, integrate, use",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/two-way-peg-app/design-architecture/",
  "title": "Design and Architecture | 2 way peg app Documentation",
  "category": "",
  "tags": "2 way peg, powpeg, peg-in, peg-out, 2way-peg, bridge, rbtc, btc, testnet, mainnet, guide, setup, integrate, use",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/gateways/dataservices/chainlink/dev-environment/",
  "title": "RIF Gateways Chainlink Dev Environment",
  "category": "",
  "tags": "rif, gateways, data services, chainlink, dev environment",
  "date": "",
  "desc": "This repository contains a boilerplate for running and testing a local development environment for the Chainlink/RSK integration. Follow these steps to setup the development environment: 1 - Install Docker Install Docker 2 - Clone Repo git clone git@github.com:smartcontractkit/chainlink-RSK.git 3 - Run Local Development Setup To start the services and the test runner, simply run: docker-compose up Docker will download the required images, build the containers and start services. The test runner should start automatically. To stop the containers and delete the volumes, so that the configuration and chain resets: docker-compose down -v The objective of this local environment is to provide external data to a Consumer contract deployed on Rootstock (RSK) network through the Chainlink Oracle system, using a simple and natural way to join both services thanks to the help of an external initiator and external adapter. A test runner is included to setup the environment and test the complete data flow, which will be: Consumer contract =&amp;gt; Oracle contract =&amp;gt; Rootstock Initiator =&amp;gt; Chainlink =&amp;gt; Rootstock TX Adapter =&amp;gt; Oracle contract =&amp;gt; Consumer contract Services: …"
 },
 {
  "url": "/rif/marketplace/dev-setup/",
  "title": "RIF Marketplace Development Environment",
  "category": "",
  "tags": "rif, marketplace, development, environment",
  "date": "",
  "desc": "This page provides a guide for developers to set up the environment for the RIF Marketplace project. Contents: Dependencies Prerequisites Components to install Setup Developer Environment Starting docker Deploying smart contracts Browser wallet IPFS Nodes RIF Marketplace Cache RIF Marketplace Upload Service RIF Marketplace UI RNS Manager RIF Storage Pinning service Using the RIF Marketplace Dependencies Prerequisites node v10 (or nvm with node v10 installed) Docker Docker compose IPFS Note: The recommended way to install IPFS is using ipfs-update but there are other ways as described here. You can run the latest version (recommended) but required is version: 0.7.0 and above. Components to install The following components will be installed as we go along; RIF Marketplace Developer Environment project RIF Marketplace Cache project RIF Marketplace Upload Service project RIF Marketplace UI project RNS Manager Project RIF Storage Pinning Service project Setup: 1. Developer Environment Download and setup the RIF Marketplace Developer Environment &amp;lt;div…"
 },
 {
  "url": "/guides/rif-relay/develop/",
  "title": "RIF Relay Develop",
  "category": "",
  "tags": "rif, envelope, relay, user, guide, develop",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/identity/data-vault/develop/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, data-vault, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Data Vault - Develop WIP"
 },
 {
  "url": "/rif/identity/manager/develop/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, manager, libraries, develop, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RIF Identity Manager - develop WIP"
 },
 {
  "url": "/rif/rlogin/develop/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, integrate, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "See the development guidelines in the repo: @rsksmart/rlogin"
 },
 {
  "url": "/guides/dex/dex-vs-cex/",
  "title": "The difference between a DEX and a CEX - The Complete Guide to Decentralized Exchanges (DEX)",
  "category": "",
  "tags": "the-complete-guide-to-dexes, decentralized-exchanges, tutorial, overview, guides, tokens, sovryn, rskswap,tokenbridge, cross-chain, bridge, web3, bitcoin, rsk, peer-to-peer, blockchain, lend, borrow, yield-farming, order-books, automated-market-maker- AMMs",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/dex/dexes-on-rsk/",
  "title": "DEXes on RSK - The Complete Guide to Decentralized Exchanges (DEX)",
  "category": "",
  "tags": "the-complete-guide-to-dexes, decentralized-exchanges, tutorial, overview, guides, tokens, sovryn, rskswap,tokenbridge, cross-chain, bridge, web3, bitcoin, rsk, peer-to-peer, blockchain, lend, borrow, yield-farming, order-books, automated-market-maker- AMMs",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rlogin/libraries/did-auth-client/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": "DID Auth client A client for authenticating against back end integrating DID Auth. This implementation is a WIP. See reference implementation at RIF Data Vault repo"
 },
 {
  "url": "/rif/identity/specs/did-auth/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, spcs, specification, auth, DID, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "DID authentication A challenge–response authentication model based on DIDs A challenge–response authentication is a family of protocols in which one party presents a question (“challenge”) and another party must provide a valid answer (“response”) to be authenticated. 10 DID Auth is a protocol that allows asking the controller of an account to sign a random message, thus demonstrating control of the account at the time of the question. This protocol used as a login method checks that the user controls the account at the time of access to the application. Additionally, it allows the application to request specific data at the time of registration, for example the user’s email or phone number. These requested data follow a specific standard, which allows the client to provide it in a unified way and even cryptographically signed by a third party. This means that the application can ask the user for verifiable credentials, identifying them by their type in a unique way. Table of contents State of the art Motivation Endpoints Signup Selective disclosure Login Logout Implementations Extensions Open work Apendix …"
 },
 {
  "url": "/rif/rns/integrate/domain-keys-management/",
  "title": "Domain keys management guidelines",
  "category": "",
  "tags": "rif, rns, rif-name-service, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Work in progress :hammer:"
 },
 {
  "url": "/rif/rns/integrate/domain-registration/",
  "title": "Domain keys management guidelines",
  "category": "",
  "tags": "rif, rns, rif-name-service, resolver, domain, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Work in progress :hammer:"
 },
 {
  "url": "/solutions/edge/",
  "title": "Edge Wallet - Solutions on RSK",
  "category": "",
  "tags": "Edge Wallet, rsk-solutions, rsk, wallet, bitcoin, defi, dApps, blockchain, cryptowallet",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/identity/specs/encryption-layout/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, encryption, infrastructure, DID, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Encryption layout WIP &amp;lt;!– ### Storing and recovering encrypted information This protocol allows each persona of a RIA to use secret-key cryptography to encrypt and decrypt information needing only the the mnemonic phrase. This protocol is based on uPort DAF Secret Box implementation using Libsodium authenticated encryption. &amp;gt; Please make use of this section for core concept definitions The protocol for encryption is: - Private key calculation 1. Let the nonce i be the nonce index of the persona derivation count (see persona creation protocol) 2. From the RIA seed derive the same nonce, using BIP-449 change = 1 - for example, RSK would use m/44&#39;/137&#39;/0&#39;/1/i 3. Get the private key of the derived account - Data encryption 4. Create a random nonce n to use for encrypting 5. Let cyph be the Libsodium authenticated encryption of data - Use n+cyph as the cyphertext. It can be used to recover the information using just the mnemonic ### The authenticated encryption operation - Encrypts a message with a key and a nonce to keep it confidential - Computes an authentication tag. This tag is used to make sure that the message hasn’t been tampered with before decrypting it. A…"
 },
 {
  "url": "/rif/multisig/sdk/erc20/erc20_transactions/",
  "title": "RIF Multisig SDK - ERC20 Transactions",
  "category": "",
  "tags": "rif, gnosis, multisig, erc20",
  "date": "",
  "desc": "follow these steps to send erc20 tokens through multisig transactions"
 },
 {
  "url": "/rif/multisig/sdk/erc721/erc721_transactions/",
  "title": "RIF Multisig SDK - ERC721 Transactions",
  "category": "",
  "tags": "rif, gnosis, multisig, erc721",
  "date": "",
  "desc": "follow these steps to send erc721 tokens through multisig transactions"
 },
 {
  "url": "/kb/ethereum-dapp-to-rsk/",
  "title": "Bring your Ethereum dApp to RSK",
  "category": "",
  "tags": "token, rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/identity/libraries/ethr-did-utils/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, utils, ethr-did-utils, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Ethr DID Utils Repo: https://github.com/rsksmart/ethr-did-utils"
 },
 {
  "url": "/rif/identity/libraries/ethr-did/",
  "title": "",
  "category": "",
  "tags": "rlogin, ethr-did, rif, rif-identity, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Ethr DID Fork of ethr-did adding RSK network support. Repo: https://github.com/rsksmart/ethr-did"
 },
 {
  "url": "/rif/rlogin/libraries/express-did-auth/",
  "title": "",
  "category": "",
  "tags": "rlogin, express-did-auth, auth, rif, rif-identity, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Express DID Auth - a challenge-response authentication model based in DIDs This package is an implementation of the DID Auth protocol. It is designed to be easely integrated to any Express application. Main features: Automatically set up the needed endpoints to fullfil the full protocol specification (signup, auth, refresh token and logout) Provides with an auth middleware to protect the desired business related endpoints Allows to decide where to send the tokens (cookies, Authorization header or request body for refresh token) Extensibility: it allows to add any specific business logic over the authentication/signup methods Deterministic challenge generation Limit requests per did per timeslot Usage Install npm i @rsksmart/express-did-auth Plug and play This is the simplest approach. Just need to provide an express app and the desired configuration for the package and it will create the needed endpoints on your behalf. import express from &#39;express&#39; import setupApp, { ExpressDidAuthConfig } from &#39;@rsksmart/express-did-auth&#39; const config: ExpressDidAuthConfig = { // your config…"
 },
 {
  "url": "/rif/identity/faq/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "FAQ WIP"
 },
 {
  "url": "/tools/tokenbridge/faq/",
  "title": "Token Bridge FAQ",
  "category": "",
  "tags": "erc20, bridge, faqs, defi, rbtc, decentralized, token-bridge, tokens, quick-start, guides, tutorial, testnet, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, sidechain, contracts, wallets",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/flyover/faqs/",
  "title": "Flyover Protocol Documentation | Frequently Asked Questions",
  "category": "",
  "tags": "flyover, powpeg, peg-in, peg-out, 2way-peg, bridge, rbtc, btc, testnet, mainnet, guide, setup, integrate, use, faqs",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/two-way-peg-app/faqs/",
  "title": "Frequently Asked Questions (FAQs) | 2 way peg app Documentation",
  "category": "",
  "tags": "2 way peg, powpeg, peg-in, peg-out, 2way-peg, bridge, rbtc, btc, testnet, mainnet, guide, setup, integrate, use",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/faqs/",
  "title": "Frequently Asked Questions",
  "category": "",
  "tags": "knowledgebase, rsk, faqs, help, support",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rlogin/faqs/",
  "title": "rLogin - FAQs",
  "category": "",
  "tags": "rlogin, rif, rif-identity, web3, react, frontend, dapp, metamask, ledger, trezor, dcent, liquality, portis",
  "date": "",
  "desc": "rLogin - FAQs - frequent asked questions"
 },
 {
  "url": "/tools/faucet/",
  "title": "RSK Testnet Faucet",
  "category": "",
  "tags": "faucet, rsk, testnet, address, wallet, tools",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/dex/features-of-a-dex/",
  "title": "The Features of a DEX - The Complete Guide to Decentralized Exchanges (DEX)",
  "category": "",
  "tags": "the-complete-guide-to-dexes, decentralized-exchanges, tutorial, overview, guides, tokens, sovryn, rskswap,tokenbridge, cross-chain, bridge, web3, bitcoin, rsk, peer-to-peer, blockchain, lend, borrow, yield-farming, order-books, automated-market-maker- AMMs",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rlogin/features/",
  "title": "rLogin - features",
  "category": "",
  "tags": "rlogin, rif, rif-identity, web3, react, frontend, dapp, metamask, ledger, trezor, dcent, liquality, portis",
  "date": "",
  "desc": "rLogin - features - a list of features and how to use them"
 },
 {
  "url": "/rif/rns/architecture/rsk-registrar/registrars/fifs/",
  "title": "First-in first-served .rsk registrar",
  "category": "",
  "tags": "rif, rns, fifs, registrar, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Register an RNS address using the FIFS registrar, without address resolution"
 },
 {
  "url": "/rif/rns/architecture/rsk-registrar/registrars/fifsaddr/",
  "title": "First-in first-served + address setup .rsk registrar",
  "category": "",
  "tags": "rif, rns, fifs, registrar, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Register an RNS address using the FIFS registrar, with address resolution"
 },
 {
  "url": "/solutions/fireblocks/",
  "title": "Fireblocks - Solutions on RSK",
  "category": "",
  "tags": "Fireblocks, rsk-solutions, rsk, bitcoin, defi, dApps, blockchain, crypto, smart-contracts, digital-assets",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/first-frontend-web3-injected/",
  "title": "How to create your first frontend for smart contracts",
  "category": "",
  "tags": "tutorial, rsk, frontend, web3",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tutorials/dweb/first-swarm-website/",
  "title": "How to deploy your first decentralised website on Swarm",
  "category": "",
  "tags": "tutorial, rif, swarm, website, dweb",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/frontend-web3-local/",
  "title": "Create a frontend for smart contracts using web3 connected to a local node",
  "category": "",
  "tags": "tutorial, rsk, frontend, web3",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/fungible-tokens-standard/",
  "title": "Fungible Token Standards",
  "category": "",
  "tags": "kb, rsk, tokens, fungible-tokens",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tools/truffle/ganache/",
  "title": "Ganache",
  "category": "",
  "tags": "ganache, tools, rsk, ethereum, smart-contracts, truffle, windows, mac, linux, get-started, how-to",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/relay/gas-costs/",
  "title": "RIF Relay Gas Costs",
  "category": "",
  "tags": "rif, envelope, relay, gas station network, gsn, overview, gas, costs",
  "date": "",
  "desc": "The overhead gas cost is the extra amount of gas required to process the relay call requested by the user. Let’s call X the gas consumed by the destination contract method call, and Y the total gas consumed by the relay call, then the relay call cost (i.e. overhead gas cost) is: Z = Y - X. SmartWallet templates RIF Relay V0.1 only has one SmartWallet template, which can be used as-is, or be injected with extra logic during the SmartWallet instance creation. V0.2 introduces a cheaper template (SmartWallet), to be used when there’s no need for extra custom-logic in the smart wallets. The behaviour is the same as the CustomSmartWallet template of V0.2, but without this capability. Gas cost from the deployment of each template. RIF Version SW Template Avg. overhead gas 0.1 SmartWallet 172400 0.2 CustomSmartWallet 98070 0.2 SmartWallet 97695 1 CustomSmartWallet TBD 1 SmartWallet TBD Note that the instance of CustomSmartWallet used didn’t point to any extra custom logic."
 },
 {
  "url": "/develop/apps/tools/gas-station/",
  "title": "Gas Station",
  "category": "",
  "tags": "gas, gas-station, rbtc, defi, decentralized, quick-start, guides, tutorial, testnet, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets",
  "date": "",
  "desc": "Gas Station The RSK Gas Station portal provides metrics for the RSK gas market. At this site, you can find the current and historical information about the RSK gas price as well as the comparssion to other main stream public chains. RSK Gas Station Website Visit RSK Gas Station through this link http://rskgasstation.info RSK Gas Station Interface The top section provides the current Tx Price and Token Value for RSK, ETH, and BTC. The middle section provides the movement of RSK and ETH Tx Price over the last 14 days in a chart as well as a table for easy reading. The bottom section provides a plot of the Tx Price in minutes for the last 24 hours."
 },
 {
  "url": "/rif/rns/operations/get-reverse/",
  "title": "Find the name of an address",
  "category": "",
  "tags": "rif, rns, rif-name-service, domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "This process describes how to find a name for a given address. This depends on the owner of the account having set its reverse resolution. Go to resolution page In the top text input, type an address in lower case, without 0x at the beginning, followed by .addr.reverse. Example Expose my account’s name"
 },
 {
  "url": "/guides/flyover/get-started/",
  "title": "Flyover Protocol Documentation | Getting Started",
  "category": "",
  "tags": "flyover, powpeg, peg-in, peg-out, 2way-peg, bridge, rbtc, btc, testnet, mainnet, guide, setup, integrate, use",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rlogin/get-started/",
  "title": "rLogin - login tool for Rootstock (RSK)",
  "category": "",
  "tags": "rlogin, rif, rif-identity, web3, react, frontend, dapp, metamask, ledger, trezor, dcent, liquality, portis",
  "date": "",
  "desc": "rLogin - login tool for Rootstock (RSK)"
 },
 {
  "url": "/kb/getblock-rpc/",
  "title": "RPC via GetBlock",
  "category": "",
  "tags": "GetBlock, rsk-solutions, rsk, bitcoin, defi, dApps, blockchain, node, tutorial, docs, api, websocket, json-rpc",
  "date": "",
  "desc": ""
 },
 {
  "url": "/solutions/getblock/",
  "title": "GetBlock - Solutions on RSK",
  "category": "",
  "tags": "GetBlock, rsk-solutions, rsk, bitcoin, defi, dApps, blockchain, node",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/geth-attach-deploy-smart-contracts/",
  "title": "Deploy a smart contract at RSK local node using Geth and Remix",
  "category": "",
  "tags": "tutorial, rsk, geth, remix, ethereum, smart contract",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/geth-attach-local-node/",
  "title": "Using geth to attach to a RSK local node",
  "category": "",
  "tags": "tutorial, rsk, geth, ethereum",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/two-way-peg-app/getting-started/",
  "title": "Getting Started | 2 way peg app Documentation",
  "category": "",
  "tags": "2 way peg, powpeg, peg-in, peg-out, 2way-peg, bridge, rbtc, btc, testnet, mainnet, guide, setup, integrate, use",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/marketplace/guide/getting-started/",
  "title": "Getting Started - RIF Marketplace User Guide",
  "category": "",
  "tags": "rif, marketplace, guide",
  "date": "",
  "desc": "RIF Marketplace User Guide"
 },
 {
  "url": "/rif/rns/guide/getting-started/",
  "title": "Getting started - RNS User guide",
  "category": "",
  "tags": "rns, guide, rns-user-guide",
  "date": "",
  "desc": "How to register a domain, log in to a domain, log out of a domain, change the language"
 },
 {
  "url": "/solutions/givetrack/",
  "title": "GiveTrack - Solutions on RSK",
  "category": "",
  "tags": "givetrack, rsk-solutions, rsk, bitgive, defi, dApps, blockchain, donations",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/armadillo/glossary/",
  "title": "Armadillo - Glossary",
  "category": "",
  "tags": "armadillo, guard, security, guides, bitcoin, rsk, peer-to-peer, merged-mining, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/flyover/glossary/",
  "title": "Flyover Protocol Documentation | Glossary",
  "category": "",
  "tags": "flyover, powpeg, peg-in, peg-out, 2way-peg, bridge, rbtc, btc, testnet, mainnet, guide, setup, integrate, use",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/two-way-peg-app/glossary/",
  "title": "Glossary | 2 way peg app Documentation",
  "category": "",
  "tags": "2 way peg, powpeg, peg-in, peg-out, 2way-peg, bridge, rbtc, btc, testnet, mainnet, guide, setup, integrate, use",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/multisig/gnosis-summary/",
  "title": "The RIF Multisig - Gnosis Summary",
  "category": "",
  "tags": "rif, gnosis, multisig",
  "date": "",
  "desc": "Overview of the gnosis integration"
 },
 {
  "url": "/kb/hardhat-setup-on-rsk/",
  "title": "How to set up a Hardhat project for RSK Testnet",
  "category": "",
  "tags": "hardhat, tutorial, overview, guides, tokens, web3, bitcoin, rsk, peer-to-peer, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tutorials/hello-world/",
  "title": "Hello World!",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/identity/mvp/applications/holder-app/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Citizens App - wallet-like mobile application (Android) The Citizens app is a wallet that can be used to store the declarative details and credentials of its users. Built-in React Native it can be packaged for both iOS and Android, however, Android is the only officially supported platform. Read the running guide to run the whole project or browse the open-source repo to run locally (please use tag holder-v0.1.2) Take a look at the Figma prototype Specifications Identity creation: the app will ask the user to backup a 12-word phrase. It is used to create cryptographic keys that will be used to sign credentials, encrypt communications, and encrypt credential backup files. The cryptographic keys derive on a W3C compliant DID representation of the identity, Setup: the app requires a 4-word PIN creation on application first start, then the user is prompted to fill some required personal information. This information fill-up process and the 12-words phrase backup is required just before the first credential is requested. It also allows to restore application contents with the 12-words phrase. Language: framework capable of adding languages seamless, including English and Spanish translations User interface: Access: the app…"
 },
 {
  "url": "/guides/stablecoin/how-to-get-stablecoins/",
  "title": "How to Get Stablecoins on RSK - The Complete Guide to Stablecoins",
  "category": "",
  "tags": "the-complete-guide-to-stablecoins, stablecoins, tutorial, overview, guides, tokens, defiant, tokenbridge, cross-chain, bridge, web3, bitcoin, rsk, peer-to-peer, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/stablecoin/how-to-store-stablecoins/",
  "title": "How to Store Stablecoins on RSK - The Complete Guide to Stablecoins",
  "category": "",
  "tags": "the-complete-guide-to-stablecoins, stablecoins, tutorial, overview, guides, tokens, defiant, tokenbridge, cross-chain, bridge, web3, bitcoin, rsk, peer-to-peer, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/stablecoin/how-to-use-rsk-tokenbridge/",
  "title": "Understanding Cross Chain Bridges: How to use the RSK Token Bridge - The Complete Guide to Stablecoins",
  "category": "",
  "tags": "the-complete-guide-to-stablecoins, stablecoins, tutorial, overview, guides, tokens, defiant, tokenbridge, cross-chain, bridge, web3, bitcoin, rsk, peer-to-peer, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/libs/iOS/",
  "title": "iOS Library",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, ios, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Implementation for resolvers for the RIF Name Service, available for iOS. Installation RNS is available through CocoaPods. To install it, simpy add the following line to your Podfile: pod &quot;Rns&quot; How to use You will need access to a running rootstock (rsk) node that can made calls to the JSON-RPC. For this we have our public nodes available for you, that are already configured in our Info.plist file. You can just create your resolver with the default constructor if you are going to use mainnet. let resolver = new RnsResolver(); Or you can use another constructor if you want to use a personal node. let resolver = new RnsResolver(nodeDir: &quot;http://your.node.org&quot;, publicResolverAddress:&quot;RSK_ADDRES_TO_YOUR_RESOLVER&quot;); Then you can start using your resolver. Sample app Download the code of the RNS iOS sample app."
 },
 {
  "url": "/rif/identity/specs/identity-layout/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, infrastructure, mobile, DID, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Identity layout Create and recover identities As described here RIF Identity proposes a standard model to enable users store one single secret and obtain multiple public and not associated identities. Technically, a user is going to save a seed that the wallets will use to create different private keys in a deterministic way. If all the wallets follow the same algorithm to create accounts, any wallet could correctly recover which accounts have been used before. Please make use of this section for core concept definitions So, any user can hold a mnemonic phrase to access their RIF Identity account, and from that account obtain different public Personas. Protocols This article specifies how a wallet should: Represent an identity identifier Create a new RIA, and obtain the first persona - for new users Obtain a new persona - for users that already have a RIA Recover all the used personas - for users that already had a RIA when accessing first time to the wallet This specification assumes the RIA is used in one single wallet at the same time. Represent an identity identifier Each persona has a public…"
 },
 {
  "url": "/roadmap/improvement-proposals/",
  "title": "Improvement Proposals",
  "category": "",
  "tags": "rskip, improvement, proposal, rsk, rbtc, rif, sk-improvement-proposal, roadmap, github, rbtc, defi, decentralized",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/storage/providers/swarm/incentives/",
  "title": "Swarm Incentives",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "File sharing systems heavily rely on users distributing files to others willingly. But strictly speaking, a user could choose to download a file and consume resources without uploading in return. Incentivization is of major importance for such systems. Why? Think for a second about whether you would like to have your laptop connected, and storing and serving file chunks from your hard-drive 24/7. No? Well, probably you are not the only one. Ask yourself another question: what would make you willing to serve chunks and contribute to a healthy network? Swarm Incentives Swarm defines the Swarm Accounting Protocol (SWAP), which is a tit-for-tat system where nodes account how much data they request and serve. Basically, this means that if a node requests a million chunks from another, it will serve one million chunks in return. However, there is a problem with this in a network of file storage. We expect a variability in network usage (a node might stream a video for 2 hours, but then be idle for the upcoming 4 hours) as well as differences in capabilities of nodes (a phone won’t be able to serve many chunks, whereas a server can). SWAP allows nodes to keep…"
 },
 {
  "url": "/grants/es/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/grants/ja/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/grants/ko/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/grants/pt-pt/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/grants/ru/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/grants/zh-Hans/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/grants/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/community-calls/",
  "title": "Welcome to RSK Community Calls | RSK Improvement Proposals",
  "category": "",
  "tags": "rskip, rsk, rif, research, community-call",
  "date": "",
  "desc": ""
 },
 {
  "url": "/contact/",
  "title": "Engage",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/contribute/",
  "title": "Contribute",
  "category": "",
  "tags": "",
  "date": "",
  "desc": "The RSK stack is open-source, if you are interested in colaborate, follow these links: RSKj (node) RNS Lumino node RSK Github Check out the RSK bug bounty program."
 },
 {
  "url": "/courses/",
  "title": "Courses on Rootstock",
  "category": "",
  "tags": "rsk, faqs, help, support, course, rootstock, ambassador-program",
  "date": "",
  "desc": ""
 },
 {
  "url": "/develop/apps/tools/explorer/",
  "title": "Explorer",
  "category": "",
  "tags": "",
  "date": "",
  "desc": "Overview Of The Explorer You can browse the overview of RSK on this page with https://explorer.rsk.co/ like below. Switch between Tabs If you want to view some specific information, you can jump through the tab bar below. Search for some information you want You can search for the information you want by entering the address,block number or tx hash in the search box. Last Block Information The next section is a panel about the last block. You can see the block number, address, the total number of transactions, and the duration in turn. Click on the number link and you can jump to the detailed page of this block. Especially,you can copy the address code by clicking the icon over the string. If you don’t need automatic update status, you can turn off the following switch. Last Block Transactions The bar…"
 },
 {
  "url": "/guides/armadillo/",
  "title": "Armadillo",
  "category": "",
  "tags": "armadillo, guard, security, guides, bitcoin, rsk, peer-to-peer, merged-mining, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/dex/",
  "title": "The Complete Guide to Decentralized Exchanges (DEX)",
  "category": "",
  "tags": "the-complete-guide-to-dexes, decentralized-exchanges, tutorial, overview, guides, tokens, sovryn, rskswap,tokenbridge, cross-chain, bridge, web3, bitcoin, rsk, peer-to-peer, blockchain, lend, borrow, yield-farming, order-books, automated-market-maker- AMMs",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/flyover/",
  "title": "Flyover Protocol Guide | Table of Contents",
  "category": "",
  "tags": "flyover, powpeg, peg-in, peg-out, 2way-peg, bridge, rbtc, btc, testnet, mainnet, guide, setup, integrate, use",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/full-stack-dapp-on-rsk/",
  "title": "Guides for Developers",
  "category": "",
  "tags": "guides, rsk, ethereum",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/get-crypto-on-rsk/",
  "title": "Get Crypto on RSK",
  "category": "",
  "tags": "knowledge-base, crypto, buy, swap, exchange, wallets, powpeg, liquality, sovryn, rsk swap, btc, rbtc",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/nft/",
  "title": "Introduction | Deploy an NFT project on the RSK Testnet",
  "category": "",
  "tags": "NFTs, tutorial, overview, guides, tokens, web3, bitcoin, rsk, peer-to-peer, blockchain, nft, ERC-721, smart-contract, hardhat, ethersjs, ipfs, metamask, testnet, pinata",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/quickstart/",
  "title": "RSK Quick Start Guide",
  "category": "",
  "tags": "quick-start, getting-started, guide, how-to, bitcoin, rsk, peer-to-peer, merged-mining, blockchain, powpeg",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/rif-relay/",
  "title": "RIF Relay User Guide",
  "category": "",
  "tags": "rif, envelope, relay, user, guide",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/rlogin/",
  "title": "rLogin Guide",
  "category": "",
  "tags": "guide, rsk",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/stablecoin/",
  "title": "The Complete Guide to Stablecoins",
  "category": "",
  "tags": "the-complete-guide-to-stablecoins, stablecoins, tutorial, overview, guides, tokens, defiant, tokenbridge, cross-chain, bridge, web3, bitcoin, rsk, peer-to-peer, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/two-way-peg-app/",
  "title": "Table of Contents | 2 way peg app Documentation",
  "category": "",
  "tags": "2 way peg, powpeg, peg-in, peg-out, 2way-peg, bridge, rbtc, btc, testnet, mainnet, guide, setup, integrate, use",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/",
  "title": "Guides",
  "category": "",
  "tags": "guide, rsk",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/",
  "title": "Welcome to RSK and RIF Knowledgebase",
  "category": "",
  "tags": "knowledgebase, rsk, faqs, help, support",
  "date": "",
  "desc": ""
 },
 {
  "url": "/libraries/rsk-precompiled-abis/",
  "title": "RSK Pre-compiled ABIs",
  "category": "",
  "tags": "libraries, abi, pre-compiled",
  "date": "",
  "desc": ""
 },
 {
  "url": "/libraries/",
  "title": "Libs",
  "category": "",
  "tags": "libraries, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/newsletter/",
  "title": "Newsletter",
  "category": "",
  "tags": "newsletter, rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/aggregation/",
  "title": "RIF Aggregation",
  "category": "",
  "tags": "rif, aggregation, zksync",
  "date": "",
  "desc": "RIF Aggregation overview"
 },
 {
  "url": "/rif/communication/",
  "title": "About RIF Communication",
  "category": "",
  "tags": "rif, rif-storage, communication, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RIF Communications is an infrastructure protocol built on top of libp2p, which allows parties in a peer-to-peer network to discover each other and establish secure communication channels, with assured anonymity, confidentiality, integrity, and authenticity. Confidentiality: no third-party can read the sent messages. Integrity: prevention of a third-party of modifying the sent messages. Authenticity: prevention of impersonation of any of the endpoints. Anonymity: If enabled, nobody in the network can identify the sender or the recipient for any particular message. By using their public keys as a discovery mechanism, users can publish pseudonyms on the RIF Directory and be discoverable without the need to remember long public keys. The RIF Secure Communications Infrastructure protocol aims to fulfill the need for establishing secure links between end users, RIFOS parties or services. In addition, RIF Communication also aspires to expose a low level library suitable to be used as communication layer in decentralised applications like Rootstock (RSK) node, Lumino network node and similar."
 },
 {
  "url": "/rif/gateways/dataservices/chainlink/",
  "title": "RIF Gateways Data Services Chainlink",
  "category": "",
  "tags": "rif, gateways, data services, chainlink",
  "date": "",
  "desc": "About Architecture Dev Environment Node Operators Public Repositories Testnet"
 },
 {
  "url": "/rif/gateways/dataservices/",
  "title": "RIF Gateways Data Services",
  "category": "",
  "tags": "rif, gateways, data services",
  "date": "",
  "desc": "Chainlink"
 },
 {
  "url": "/rif/gateways/triggers/notifier/",
  "title": "RIF Notifier",
  "category": "",
  "tags": "rif, gateways, triggers, notifier",
  "date": "",
  "desc": "About Architecture Setup API Public Repositories"
 },
 {
  "url": "/rif/gateways/triggers/",
  "title": "RIF Gateways Triggers",
  "category": "",
  "tags": "rif, gateways, triggers",
  "date": "",
  "desc": "Notifier"
 },
 {
  "url": "/rif/gateways/",
  "title": "About RIF Gateways",
  "category": "",
  "tags": "rif, gateways",
  "date": "",
  "desc": "RIF Gateways develops easy-to-use tools and technologies that allow developers and companies to design blockchain-based applications that can seamlessly interact with the external world. RIF Gateways leverages the latest advances in research and integrates the most widely-recognized industry solutions, providing at the same time a unified and common interface layer which reduces the complexity of implementing these technologies. It allows consumers and providers to easily set up secure and reliable data transfers supporting a wide range of data consumption, subscription, and payments models. RIF Gateways is structured into 3 core services: Data Services Triggers Schedulers Data Services RIF Data Services manages the information coming from the external world into the Blockchain (Inbound transactions). These are also commonly known as “Oracles” and allow smart contracts to run business logic based on external information. Some examples of applications that typically require external data are insurance contracts (which may need information about external events and pay whenever a specific chain of events takes place) or finance applications (which usually involve contracts that need access to price feeds and exchange rates such as USD/EUR), among others. Triggers RIF Triggers deals with…"
 },
 {
  "url": "/rif/identity/data-vault/architecture/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, data-vault, architecture, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Data vault - Architecture Web client SDK HTTPS service Provider module"
 },
 {
  "url": "/rif/identity/data-vault/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, data-vault, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Data vault The RIF Identity Data Vault is a public service where the users can store their personal information in a secure way. That information may be declarative details, verifiable credentials or other metadata related to the user. It is controlled 100% by the user, who just needs the mnemonic phrase to access it, other apps need authorization from the user to access his information because the data will be encrypted with the user private key. The project has a known vulnerability that is being fixed right now. See #74. The first version of the RIF Data Vault is the IPFS Centralized Pinner Use Design &amp;amp; architecture Web client SDK HTTPS service Provider module Develop"
 },
 {
  "url": "/rif/identity/libraries/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Libraries Mnemonics - identity derivation tools using mnemonic phrases RSK DIDs - handle Ethr DID method procedures in RSK network Ethr DID - uPort ethr-did with RSK support Ethr DID Utils - testing utilities for Ethr DID Registry DAF bindings - use uPort agent with RIF identity multi identity model VC Core module - Verifiable Credentials in React.js + Redux Node utils - utilities for Node.js backend"
 },
 {
  "url": "/rif/identity/manager/user-guide/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, manager, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RIF Identity Manager - User Guide WIP"
 },
 {
  "url": "/rif/identity/manager/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, manager, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RIF Identity Manager User guide Design &amp;amp; architecture Develop"
 },
 {
  "url": "/rif/identity/mvp/applications/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The MVP - Applications Government app Citizens app Police officers app"
 },
 {
  "url": "/rif/identity/mvp/services/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, service, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Services RIF Self-Sovereign Identity solution provides two main services to interact with: Issuer service - serves for a web application that receives verifiable credential issuance requests and lets the user to manually deny or approve them (thus, issuing the verifiable credential) Convey service - public transport layer for JWTs using IPFS Data Vault - a user-centric cloud storage"
 },
 {
  "url": "/rif/identity/mvp/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The MVP The RIF Identity MVP has the objective to develop a basic model putting into action the different tools known today in the field of self-sovereign identity: Identity management in public ledgers Issuance and verification of digitally signed credentials User-centric cloud storage Identity and credential authentication The model is the emission of ID Cards, Driving Licenses and Parking Permits. Citizens use a mobile wallet application where they input their identity details like name and age, and request any of these credentials to the government. The government agent accesses a web application where all the credential requests are listed and can be manually granted. Once credentials are granted, Citizens store them in a user-centric cloud storage called The Data Vault. Police officers can verify citizen’s credentials scanning a QR code using another mobile application. To understand the model we identify three actors: An issuer: the government A holder: a citizen A verifier: a police officer The user story The main user story across this project is: As a citizen I would like to request for a driving licence credential with my mobile phone I…"
 },
 {
  "url": "/rif/identity/specs/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, specs, DID, encrytpion, layout, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Specs RIF Self-sovereign Identity works under a set of JWT-based and blockchain-based protocols building a user centric verifiable credential model. Protocols Identity layout - create and recover identities Encryption layout - Storing and recovering encrypted information DID authentication - a challenge–response authentication model based on DIDs Credential requests protocol - a simple protocol for request, grant and receive credential case The Convey service - transport content that does not fit into a QR code Presentations timestamps - emitting and validating presentations with timestamps What is a JWT? JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. 1 These claims can be secured with digital signatures or Message Authentication Codes, and/or encrypted with different algorithms. The following is an example of a JWT Claims Set: {&quot;iss&quot;:&quot;joe&quot;, &quot;exp&quot;:1300819380, &quot;http://example.com/is_root&quot;:true} RIF Identity expresses support for RFC-7519 Identity representation Decentralized identifiers (DIDs) are a new type of identifier that enables verifiable, decentralized digital identity.2 A DID identifies any subject such as a person, an organization, a thing, an abstract entity, and so on. DIDs…"
 },
 {
  "url": "/rif/identity/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RIF Identity RIF Identity is the identity and reputation layer within the RIF ecosystem. It is meant to allow users to easily control their digital identities to interact in decentralized economies while building a self-sovereign identity and reputation. This will enable people, especially those excluded from the traditional financial system, to participate in the decentralized digital economy of the future. The main goal of RIF Identity is to protect users’ personal data in a privacy respectful way, empowering them to manage who can access it and giving them full control of their reputation so they can use it to interact with multiple marketplaces and platforms with freedom to move from one to another without losing their track record, contacts and social value. Try Use the self-sovereign identity MVP Learn Read the specifications Develop Use RIF Identity libraries Data Vault User-centric cloud storage &amp;lt;img…"
 },
 {
  "url": "/rif/marketplace/guide/",
  "title": "RIF Marketplace User Guide",
  "category": "",
  "tags": "rif, marketplace, guide",
  "date": "",
  "desc": "RIF Marketplace User Guide"
 },
 {
  "url": "/rif/marketplace/services/rnsdomains/",
  "title": "RIF Marketplace Services RNS Domains",
  "category": "",
  "tags": "rif, marketplace, rns",
  "date": "",
  "desc": "Technical Specifications"
 },
 {
  "url": "/rif/marketplace/services/storage/",
  "title": "RIF Marketplace Services Storage",
  "category": "",
  "tags": "rif, marketplace, storage",
  "date": "",
  "desc": "Technical Specifications"
 },
 {
  "url": "/rif/marketplace/services/",
  "title": "RIF Marketplace Services",
  "category": "",
  "tags": "rif, marketplace, services",
  "date": "",
  "desc": "RNS Buy Sell Domains Decentralized Storage"
 },
 {
  "url": "/rif/marketplace/",
  "title": "About RIF Marketplace",
  "category": "",
  "tags": "rif, marketplace",
  "date": "",
  "desc": "The RIF Marketplace serves as the main component through which all the other RIF services connect with their end-users and customers. It is designed as a one-stop-shop for a wide variety of decentralized services, allowing providers and consumers to meet in a secure and efficient way. The main goal of the RIF Marketplace is to enable the fast and efficient creation of decentralized sharing economies (DSE) on top of Rootstock (RSK) and RIF, providing the required tools to bring all parties together. Providers can list their offerings and connect with potential users for a vast range of decentralized services such as Storage, Payments, Communications, and Data Services, presenting at the same time a common and unified interface and user experience. You can access the Marketplace on the Rootstock (RSK) Mainnet: marketplace.rifos.org"
 },
 {
  "url": "/rif/multisig/sdk/erc20/",
  "title": "RIF Multisig SDK - ERC20",
  "category": "",
  "tags": "rif, gnosis, multisig, erc20",
  "date": "",
  "desc": "follow these steps to receive/send erc20 tokens through multisig transactions"
 },
 {
  "url": "/rif/multisig/sdk/erc721/",
  "title": "RIF Multisig SDK - ERC721",
  "category": "",
  "tags": "rif, gnosis, multisig, erc721",
  "date": "",
  "desc": "follow these steps to send/receive erc721 tokens through multisig transactions"
 },
 {
  "url": "/rif/multisig/sdk/rbtc/",
  "title": "RIF Multisig SDK - RBTC",
  "category": "",
  "tags": "rif, gnosis, multisig, rbtc",
  "date": "",
  "desc": "follow these steps to send/receive gas on the multisig account and to create raw transactions"
 },
 {
  "url": "/rif/multisig/sdk/",
  "title": "RIF Multisig SDK",
  "category": "",
  "tags": "rif, gnosis, multisig",
  "date": "",
  "desc": "Overview of the operations allowed through a Multisig account"
 },
 {
  "url": "/rif/multisig/",
  "title": "RIF Multisig - Savings and Vault Solution",
  "category": "",
  "tags": "rif, gnosis, multisig",
  "date": "",
  "desc": "Overview of the RIF Multisig - Savings and Vault solution"
 },
 {
  "url": "/rif/relay/",
  "title": "About RIF Relay",
  "category": "",
  "tags": "rif, relay, gas station network, gsn",
  "date": "",
  "desc": "RIF Relay is a secure sponsored transaction system that enables users to pay the transaction fees using ERC-20 tokens. This enables end users to transact entirely using one asset instead of having to manage a separate asset for gas. For general information about RIF Relay, including its design, architecture, and specifications, please refer to the table of contents down below. If you’re looking for a step-by-step walkthrough on getting started and using RIF Relay, please check out the RIF Relay guide instead. Table of Contents Overview Architecture Versions Gas Costs Contracts"
 },
 {
  "url": "/rif/rns/architecture/rsk-registrar/registrars/",
  "title": "Rootstock (RSK) Registrars",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript, registrar,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RNS registrars"
 },
 {
  "url": "/rif/rns/architecture/rsk-registrar/renewers/",
  "title": "Rootstock (RSK) Renewers",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Simple renewer"
 },
 {
  "url": "/rif/rns/architecture/rsk-registrar/",
  "title": ".rsk Registrar",
  "category": "",
  "tags": "rif, rns, rif-name-service, registrar, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The registrar is separated into several components for simplicity, modularity, and privilege minimization. Rootstock (RSK) Owner is the owner of rsk top level domain, so it is the only contract that can invoke setSubdomainOwner in RNS Registry. It grants access to other contracts for registering new domains and/or renewing domain’s expiration time. Currently we’ve enabled a first-in first-served registrar contract and a simple renewer contract that enable minimal actions to provide basic functionality for domain creation and administration."
 },
 {
  "url": "/rif/rns/architecture/",
  "title": "Architecture",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The RIF Name Service architecture is based on 3 main components: The RNS Registry. A tree-structured registry that provides an owner, a resolver, and a TTL for each existing domain. The resolver of a domain is a contract that provides information from a name in response to client requests. The owner of a domain can be an account or a contract, and is the only one who can create subdomains. Contracts that own domains are called Registrars. RNS provides a public registrar for registering .rsk domains, currently the only active top level domain. RNS also provides the necessary architecture to perform reverse lookups, this means finding a related domain for a given address. Read the specs to know more about the motivation for this architecture design."
 },
 {
  "url": "/rif/rns/guide/",
  "title": "RNS User guide",
  "category": "",
  "tags": "rns, guide, rns-user-guide",
  "date": "",
  "desc": "A user guide for the RIF Name Service"
 },
 {
  "url": "/rif/rns/integrate/",
  "title": "RNS Integration guidelines",
  "category": "",
  "tags": "rns, javascript, dapp, wallet, integrate",
  "date": "",
  "desc": "Learn how to integrate RNS with your wallet or dApp."
 },
 {
  "url": "/rif/rns/libs/javascript/",
  "title": "RNS JS Library",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Learn more about RNS JS Library."
 },
 {
  "url": "/rif/rns/libs/rns-artifacts/resolver/",
  "title": "RNS Solidity artifacts - resolvers",
  "category": "",
  "tags": "rif, rns, artifacts, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The Resolver contract handles the resolution between the name domain and the resource. Each Registry entry references a Resolver. Further reading Resources String Resolver: stores string resolution for a given domain."
 },
 {
  "url": "/rif/rns/libs/rns-artifacts/",
  "title": "RNS Solidity artifacts",
  "category": "",
  "tags": "rns, artifacts",
  "date": "",
  "desc": "RNS artifacts is a library for smart contract development. Source: github.com/rnsdomains/rns-artifacts It provides implementations of RNS Registry, Registrars, and Resolvers which you can deploy as-is or extend to suit your needs, as well as Solidity components to build custom contracts and more complex decentralized systems. Resolver: contract responsible for performing resource lookups for a name - for instance, returning a contract address, a content hash, or IP address(es) as appropriate. String Resolver"
 },
 {
  "url": "/rif/rns/libs/",
  "title": "RNS Libraries",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RIF Name Service is part of the RIF Open Platform ecosystem. The developer community is working to help other developers enabling libraries and SDKs. Platform Component Javascript Resolver Android Resolver | Sample App iOS Resolver | Sample App Python Resolver Solidity RNS Full Smart contract suite | rns-artifacts"
 },
 {
  "url": "/rif/rns/operations/",
  "title": "Operations",
  "category": "",
  "tags": "rif, rns, rif-name-service, domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Registration: Register an .rsk domain Resolution: Resolve a domain’s address Change resolver Set address resolution Set Bitcoin address resolution Ownership admin: Renew a domain Transfer a domain Subdomains: Register a subdomain Change subdomain’s owner Reverse lookup: Expose the name of your address Find the name of an address Register with auction model?: Migrate a domain from auction registration"
 },
 {
  "url": "/rif/rns/specs/",
  "title": "RNS Specs",
  "category": "",
  "tags": "rif, rns, rif-name-service, integrate, resolver, node, specs, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RNS specifications, and name mapping convention"
 },
 {
  "url": "/rif/rns/tools/",
  "title": "Tools",
  "category": "",
  "tags": "rif, rns, rif-name-service, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Web3 MyCrypto RNS Manager Subdomain tool"
 },
 {
  "url": "/rif/rns/",
  "title": "RIF Name Service",
  "category": "",
  "tags": "rif, rns, rif-name-service, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RNS provides an architecture which enables the identification of blockchain addresses by human-readable names. .rsk Register! Try the service Register a domain in the Testnet, for free. Integrate with RNS Easy guides on how to integrate RNS in your solution. Develop on top of RNS Deploy RNS suite in your local development environment Use the libraries Use simple libraries to interact with RNS service. The stack RNS dApp Libraries Smart contracts Specifications Motivation By adding a name resolution service, also known as “alias”, the probability of errors…"
 },
 {
  "url": "/rif/scheduler/sdk/",
  "title": "RIF Scheduler - SDK",
  "category": "",
  "tags": "",
  "date": "",
  "desc": "Repository: rsksmart/rif-scheduler-sdk With the RIF Scheduler SDK you can schedule transactions in the Rootstock (RSK) network. Features: Query and purchase plans Schedule transactions Schedule recurrent transactions Cancel a scheduling Query transactions scheduled and states Request refunds of overdue executions This is the official SDK for @rsksmart/rif-scheduler-contracts smart contract. Use it to interact with the RIFScheduler smart contract in a more simple way. Getting Started @rsksmart/rif-scheduler-sdk is built on top of ethers. Installation npm i @rsksmart/rif-scheduler-sdk ethers Use 0xad249557515d8b89f2869834857bb872d7b5c398 for RSK Testnet You can run your own instance following this guide Initialization First, you will need an ethers provider or signer instance. Using a provider will only allow read-only operations, such as getPlan. Using a signer will allow all operations, such as purchasePlan, schedule, etc. You can pass an object as optional third parameter with a property supportedER677Tokens, where you can configure a list of tokens supporting ERC677 interface like the RIF token. For example, to connect the SDK to Metamask import {…"
 },
 {
  "url": "/rif/scheduler/",
  "title": "RIF Scheduler - A service for scheduling transactions",
  "category": "",
  "tags": "rif, rif-scheduler, sdk, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The main motivation of this project is to build a reliable service that allows users to schedule Rootstock (RSK) transactions that will be executed in the future by a third party. Quick start Install the SDK in your dapp’s front-end to enable your users to schedule transactions. Read how to run your own scheduler and start making revenue. Model A requester (REQ) makes the payment of the service for a given number of transactions to be executed. The Service Provider (SP) provider will be the one who will execute the transaction and receive the payment in return. REQ buys the service. Pays in RIF tokens, RBTC, or any ERC20 whitelisted token for an amount of transactions that can be scheduled in the future. The SP is going to execute the transaction and receive the payment in return The payment is locked until each transaction is executed. REQ wants to schedule a transaction. The transaction has a destination account and a data field, and a given time of execution. REQ submits this in the SP’s smart contract. The SP service is notified of the new transaction requested. The alarm rings and the SP submits the transaction.…"
 },
 {
  "url": "/rif/storage/pinning/",
  "title": "RIF Storage Pinning service",
  "category": "",
  "tags": "rif, rif-storage, rif-pinning, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RIF Storage Pinning service The RIF Storage Pinning service, offered together with the RIF Marketplace, is a service that allows Storage Providers to list their offers and enter in storage agreements with consumers, which can pay using different methods such as RBTC or RIF tokens. Repositories Pinning Service: A nodejs service which listens on Providers offer and pins/unpins files from Provider running IPFS node Storage Smart Contracts: A smart contract registry which stores the offers and agreements. Pinning CLI: CLI tool for interacting with the Storage Smart Contracts Pinning UI: Simple UI for development purposes which interacts with the Storage Smart Contracts Additional information for the Pinning service can be found in RIF Marketplace-Services-Storage"
 },
 {
  "url": "/rif/storage/providers/ipfs/",
  "title": "IPFS",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "IPFS stands for Interplanetary File System. At its core it is a versioned file system which can store files and track versions over time, very much like Git. It also defines how files move across a network, making it a distributed file system, much like BitTorrent. In combining these two properties, IPFS enables a new permanent web and augments the way we use existing internet protocols like HTTP."
 },
 {
  "url": "/rif/storage/providers/swarm/guides/",
  "title": "storage/providers/swarm/guides/index",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "WIP"
 },
 {
  "url": "/rif/storage/providers/swarm/",
  "title": "About Swarm",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Swarm is a censorship resistant, permissionless, decentralised storage and communication infrastructure. This base-layer infrastructure provides these services by contributing resources to each other. These contributions are accurately accounted for on a peer to peer basis, allowing nodes to trade resource for resource, but offering monetary compensation to nodes consuming less than they serve. From the end user’s perspective, Swarm is not that different from the world wide web. In the background, the difference is that content is hosted on a peer-to-peer storage network instead of individual servers. This peer-to-peer network is self-sustaining due to a built-in incentive system which uses peer-to-peer accounting and allows trading resources for payment. Swarm is designed to deeply integrate with the devp2p multiprotocol network layer of Ethereum as well as with the Ethereum blockchain for domain name resolution, service payments and content availability insurance. Resources Links Official website Documentation Github repository Papers Swap, Swear and Swindle: Incentive System for Swarm Viktor Trón, Aron Fischer, Dániel A. Nagy, Zsolt Felföldi &amp;amp; Nick Johnson (2016). Generalised Swap Swear and Swindle Games Viktor Trón &amp;amp; Aron Fischer (2019). Presentations Swap, Swear and Swindle…"
 },
 {
  "url": "/rif/storage/providers/",
  "title": "storage/providers/index",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "WIP"
 },
 {
  "url": "/rif/storage/",
  "title": "About RIF Storage",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RIF Storage is an open, censorship resistant, permissionless and decentralized storage protocol. It provides a unified interface to 3rd party decentralized storage providers like IPFS or Swarm. We are adding incentives to these systems to ensure resistance to trivial attacks, availability and to allow participants to be rewarded for their participation in the network. As an end-user RIF Storage allows you to take back ownership of your data. Even if the service you are using stops existing you can retrieve all your content. As a developer/service creator RIF Storage allows you to not worry about storage for your application. It also comes with content delivery service out of the box so your application scales without you having to invest in additional infrastructure. Thanks to the built-in incentives, anyone can become a storage provider by offering their unused storage to others and getting paid for it."
 },
 {
  "url": "/rif/",
  "title": "RSK Infrastructure Framework",
  "category": "",
  "tags": "rif, rif-storage, rif-lumino, rns, rif-identity, DID, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RIF Services Rootstock (RSK) Infrastructure Framework Open Standard (RIF OS) is a suite of open and decentralized infrastructure protocols that enable faster, easier and scalable development of distributed applications (dApps) within a unified environment. RIF OS is an all in one, easy to use, blockchain infrastructure service framework that provides developers and organizations access to a variety of services across multiple crypto-economies. RIF OS Protocols enable broad interoperability and faster time-to-deployment, and aim to bridge the gap between blockchain technologies and their mass-market adoption. RIF OS Protocols complete the Rootstock (RSK) Smart Contract Network vision of bringing the Internet of Value to life. RIF Name Service RNS is a decentralized service that allows users to have a readable domain or alias. It can be used to identify other personal resources, such as payment or communication addresses. Learn more about RIF Name Service RIF Lumino Network RIF Lumino Network is a third-layer solution to the Bitcoin blockchain, that enables state channels for every token built on Rootstock (RSK) increasing transaction throughput and reduces costs by orders of magnitude. Learn more about RIF Lumino Network RIF Marketplace RIF…"
 },
 {
  "url": "/solutions/defiant/",
  "title": "Defiant - Solutions on RSK",
  "category": "",
  "tags": "defiant, rsk-solutions, rsk",
  "date": "",
  "desc": ""
 },
 {
  "url": "/solutions/kriptonmarket/",
  "title": "Kripton Market - ON/Off Ramp Solutions on RSK",
  "category": "",
  "tags": "kripton-market, defi, exchange, crypto, buy, rsk-solutions, rsk, on-ramp, off-ramp",
  "date": "",
  "desc": ""
 },
 {
  "url": "/solutions/",
  "title": "Solutions on RSK",
  "category": "",
  "tags": "solutions, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, on-ramp, off-ramp, payments, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/the-stack/",
  "title": "The Stack",
  "category": "",
  "tags": "",
  "date": "",
  "desc": "DeFi Wallet Exchange Asset Tokenization Stablecoins Payments Margin Trading Lending and borrowing Derivatives Insurance Escrow Prediction Markets Marketplaces Scoring Liquidity protocols Libraries RIF Marketplace RIF Directory RIF Payments RIF Storage RIF Comms RIF Gateways Your sharing economy rsk smart contracts Bitcoin: Store of Value"
 },
 {
  "url": "/tools/explorer/",
  "title": "Explorer",
  "category": "",
  "tags": "overview, explorer, rsk, search, blocks, transactions, mainnet, tools",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tools/tokenbridge/",
  "title": "RSK  ETH Token Bridge",
  "category": "",
  "tags": "erc20, bridge, faqs, defi, decentralized, token-bridge, tokens, quick-start, guides, tutorial, testnet, networks, dapps, tools, rsk, ethereum, eth, rbtc, smart-contracts, install, get-started, how-to, mainnet, testnet, sidechain, contracts, swaps",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tools/truffle/",
  "title": "Truffle Overview",
  "category": "",
  "tags": "truffle, ganache, quick-start, truffle-boxes, open zeppelin, testing, networks, deployment, npm, tools, rsk, ethereum, smart-contracts, install, windows, mac, linux, get-started, how-to",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tools/",
  "title": "Tools",
  "category": "",
  "tags": "truffle, ganache, explorer, testnet, faucet, networks, deployment, gas-station, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, wallets",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tutorials/ethereum-devs/",
  "title": "Tutorials for Ethereum Developers",
  "category": "",
  "tags": "tutorial, rsk, ethereum",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tutorials/frontend/",
  "title": "Tutorials for build frontend",
  "category": "",
  "tags": "tutorial, rsk, frontend",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tutorials/tokens/",
  "title": "Tutorials about tokens",
  "category": "",
  "tags": "tutorial, rsk, token",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tutorials/",
  "title": "Tutorials",
  "category": "",
  "tags": "tutorial, rsk",
  "date": "",
  "desc": ""
 },
 {
  "url": "/wallet/rwallet/",
  "title": "rWallet",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/wallet/use/",
  "title": "Wallets",
  "category": "",
  "tags": "rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/wallet/",
  "title": "Wallets",
  "category": "",
  "tags": "rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/rif-relay/install/",
  "title": "RIF Relay Installation",
  "category": "",
  "tags": "rif, envelope, relay, user, guide, install",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/rif-relay/install/",
  "title": "RIF Relay Installation",
  "category": "",
  "tags": "rif, envelope, relay, user, guide, install",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/storage/providers/swarm/install/",
  "title": "Installing Swarm",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "To install Swarm, you can download the latest binaries or—alternatively—compile them directly from the source code. Download the binaries (recommended) Pre-compiled binaries for Linux, macOS and Windows are available to download from the Swarm official homepage. Compile from source code Prerequisites 1. Git To install git, follow the instructions here. 2. Golang To install go, follow the instructions here. 2.1 Set up Go environmnet Make sure the GOPATH environment variable is set: echo &#39;export GOPATH=$HOME/go&#39; &amp;gt;&amp;gt; ~/.bashrc echo &#39;export PATH=$GOPATH/bin:$PATH&#39; &amp;gt;&amp;gt; ~/.bashrc source ~/.bashrc Create the $HOME/go directory if it doesn’t exist: mkdir $HOME/go Verify this step was successful through echo $GOPATH. Create the Swarm binaries If needed, create the directory for the project: mkdir -p $GOPATH/src/github.com/ethersphere Clone the repo: cd $GOPATH/src/github.com/ethersphere/ &amp;amp;&amp;amp; git clone https://github.com/ethersphere/swarm Compile the Swarm binaries: cd $GOPATH/src/github.com/ethersphere/swarm &amp;amp;&amp;amp; make swarm Check the Swarm version: &amp;lt;div…"
 },
 {
  "url": "/guides/rif-relay/installation-requirements/",
  "title": "RIF Relay Installation Requirements",
  "category": "",
  "tags": "rif, envelope, relay, user, guide, install",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/integrate/integrate-addr-resolution/",
  "title": "Use domains instead of long hexa addresses",
  "category": "",
  "tags": "rif, rns, rif-name-service, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "This is a demonstration of how to get the address of a domain. We are going to do it in a React app. Requirements Node npm yarn create-react-app Recipe Create a new react app create-react-app rns-addr-sample-app cd rns-addr-sample-app Install @rsksmart/rns and web3. yarn add web3 @rsksmart/rns Update your App.js file import React, { Component } from &#39;react&#39;; import Web3 from &#39;web3&#39;; import RNS from &#39;@rsksmart/rns&#39;; export default class extends Component { constructor(props) { super(props); this.state = { domain: &#39;&#39;, getting: false, addr: null, error: null, }; this.handleDomainChange = this.handleDomainChange.bind(this); this.&amp;lt;span…"
 },
 {
  "url": "/rif/rns/integrate/integrate-dapp/",
  "title": "Integrate your dApp with RNS",
  "category": "",
  "tags": "rns, javascript, dapp, integrate",
  "date": "",
  "desc": "Learn how to integrate RNS with your dApp."
 },
 {
  "url": "/rif/rns/integrate/integrate-wallet/",
  "title": "Integrate your wallet with RNS",
  "category": "",
  "tags": "rif, rns, javascript, rif-name-service, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The first thing you need to do is to register the name of your wallet now! Search for it here: .rsk Register! Content Use domains instead of addresses within your wallet Use Rootstock (RSK) domains User other blockchain domains Set your users address resolution to domains Set Rootstock (RSK) address Set other blockchain address Register subdomains for newcomers Check for available subdomains Different ways to perform registrations Create a backend that executes registrations Create a smart contract that gifts subdomains Use the batch registration tool Create more subdomains under a user subdomain This tutorial has been created to be used with the RNS JS library. The library needs Web3 to be instantiated, so if you already use Web3, welcome to the journey! If not, don&#39;t worry, you are still able to check out our smart contracts architecture and interact…"
 },
 {
  "url": "/develop/apps/integrate/",
  "title": "How to Integrate",
  "category": "",
  "tags": "apps, integrate, node, linux, windows, mac, rbtc, defi, decentralized, quick-start, guides, tutorial, testnet, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets",
  "date": "",
  "desc": "Step 1: Install a node RSK nodes can be installed on all major platforms, including Linux, Windows, and Mac. Install node Step 2: Create a Wallet The RSK network is account-based and incorporates an optional blockchain identifier, also known as chain-id. About addresses Create a Wallet Step 3: Get RBTC The Smart Bitcoin (RBTC) is the token used to pay for the execution of transactions in RSK. Test RBTC Buy RBTC Step 4: Connect your app Smart contracts for RSK are written using Solidity and are fully compatible with Ethereum Smart Contracts, so you can migrate your existing Ethereum Smart Contract to RSK Smart without making any changes. Port Ethereum dApps More Tutorials"
 },
 {
  "url": "/guides/rif-relay/integrate/",
  "title": "RIF Relay Integration",
  "category": "",
  "tags": "rif, envelope, relay, user, guide, integrate",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rlogin/integrations/",
  "title": "rLogin - Integrations",
  "category": "",
  "tags": "rlogin, rif, rif-identity, integrate, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "We are currently integrated with the following dApps A) RNS Manager This is RIF Name Service platform. Use it to: Register .rsk domains Administrate your domains URL: manager.rns.rifos.org (testnet.manager.rns.rifos.org for RSK Testnet) PRs: rnsdomains/rns-manager-react#354 - Add rLogin support with injected providers rnsdomains/rns-manager-react#357 - Add Wallet Connect B) Rootstock (RSK) Token Bridge Use this app to cross tokens with Ethereum network. For example, you can secure your USDT tokens on Rootstock (RSK) network. URL: tokenbridge.rsk.co PRs: rsksmart/tokenbridge#147 - Add rLogin with injected provider and Wallet Connect rsksmart/tokenbridge#148 and #149 - minor fixes C) RIF Faucet This is the platform where you can get testnet RIF tokens to test the apps on their test modes. URL: faucet.rifos.org PR: riflabs/rif-faucet-client#20 - Add rlogin, show message about missing gas, and minor cleanups D) RIF Identity Manager Manage your assets, data and identity from a single platform. URL: identity.rifos.org Repo: &amp;lt;a…"
 },
 {
  "url": "/kb/interact-with-smart-contracts/",
  "title": "Interact with Smart Contracts",
  "category": "",
  "tags": "rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/interface-registry/",
  "title": "Universal Smart Contract Interface Registry",
  "category": "",
  "tags": "interface, registry, rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/marketplace/guide/intro/",
  "title": "Introduction - RIF Marketplace User Guide",
  "category": "",
  "tags": "rif, marketplace, guide",
  "date": "",
  "desc": "RIF Marketplace User Guide"
 },
 {
  "url": "/rif/rlogin/libraries/intro/",
  "title": "rLogin Libraries",
  "category": "",
  "tags": "rlogin, libraries, architecture, rif, identity, vault, marketplace, auth, rif-data-vault, rns, ui",
  "date": "",
  "desc": "multiple libraries that enable seamless integration to rLogin protocols"
 },
 {
  "url": "/rif/rns/guide/intro/",
  "title": "Intro - RNS User guide",
  "category": "",
  "tags": "rns, guide, rns-user-guide",
  "date": "",
  "desc": "What is RNS, and how to use the testnet"
 },
 {
  "url": "/rif/identity/mvp/applications/issuer-app/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Government app - web application listing credential requests The Government app is a React application that handles the back office tasks of issuing and rejecting credential requests. It is built to be connected to any Request Credential Service Server (that is API compatible with RIF Identity issuer service), and login happens with a username and password. Read the running guide to run the whole project or browse the open-source repo to run locally (please use tag holder-v0.1.2) Specifications User interface: web browser app capable to display the citizen’s information when a credential request arrives, requiring a user-activated confirmation before issuing the credentials. Holder app interaction: the server will receive a credential request and open a private communication endpoint for the holder’s app to query the issuance process status and the credential information. Persistence: the application must store all the information in a local database. It logs when a request arrives and an issuance is performed. Features Login using HTTP Basic Auth with username and password View list of received credential requests and request content Issue and Deny Verifiable Credentials Screenshots Login Screen …"
 },
 {
  "url": "/rif/identity/mvp/services/issuer-service/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, service, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Issuer service Serves for the Government application that allows receiving credential issuance requests and approving them manually. Read the running guide to run the whole project or browse the open-source repo to run locally (please use tag v0.1.0) Features Request credentials service: receives Selective disclosure requests with simple key-value claims. This is a public service. Back office: now it requires a simple HTTP login to access a dashboard to allow or deny credentials"
 },
 {
  "url": "/rif/storage/libraries/javascript/",
  "title": "RIF Storage JS",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Install npm &amp;gt; npm install @rsksmart/rif-storage Use in Node.js var RifStorage = require(&#39;@rsksmart/rif-storage&#39;) Use in a browser with browserify, webpack or any other bundler var RifStorage = require(&#39;@rsksmart/rif-storage&#39;) Use in a browser Using a script tag Loading this module through a script tag will make the RifStorage obj available in the global namespace. &amp;lt;script src=&quot;https://unpkg.com/@rsksmart/rif-storage/dist/index.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;!-- OR --&amp;gt; &amp;lt;script src=&quot;https://unpkg.com/@rsksmart/rif-storage/dist/index.js&quot;&amp;gt;&amp;lt;/script&amp;gt; Usage This is a client library, therefore you need to provide access to the provider’s running node for specifics see Providers. import RifStorage, { Provider } from &#39;@rsksmart/rif-storage&#39; // Connects to locally running node const storage = RifStorage(Provider.IPFS, { host: &#39;localhost&#39;, port: &#39;5001&#39;, protocol:…"
 },
 {
  "url": "/develop/json-rpc-api/",
  "title": "JSON-RPC API",
  "category": "",
  "tags": "API, json, rpc, json-rpc, transactions, quick-start, guides, tutorial, testnet, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, sidechain, contracts, mining",
  "date": "",
  "desc": "These methods are meant to be used for mining. Mining pools should interact with this API in order to do merged mining. JSON-RPC Methods mnr_getWork mnr_submitBitcoinBlock mnr_submitBitcoinBlockTransactions mnr_submitBitcoinBlockPartialMerkle JSON-RPC API Reference mnr_getWork Returns the hash of the current block for merged mining, the boundary condition to be met (“target”), parent block hash and notify flag. Parameters none Returns blockHashForMergedMining: DATA, 32 Bytes - Hash of the RSK block that should be used for merged mining. This hash must be included after the RSKBLOCK: tag. It is a 256-bit unsigned integer represented as a hexadecimal string. target: DATA, 32 Bytes - Target difficulty that solution for current work must met to be valid. Merged mined block is solved if it’s hash is below or equal this target. Target is a 256-bit unsigned integer represented as a hexadecimal string. parentBlockHash: DATA, 32 Bytes - Parent block hash, 256-bit unsigned integer as an hexadecimal string. feesPaidToMiner: QUANTITY - Fees paid to the miner in the RSK block in 1/10^18 bitcoins. notify: Boolean - This is a boolean flag that is…"
 },
 {
  "url": "/wallet/use/json-rpc/",
  "title": "JSON-RPC",
  "category": "",
  "tags": "json-rpc, rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/rif-relay/launch/",
  "title": "RIF Relay Launch",
  "category": "",
  "tags": "rif, envelope, relay, user, guide, launch",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/aggregation/learn/",
  "title": "RIF Aggregation - Architecture",
  "category": "",
  "tags": "rif, aggregation, zksync",
  "date": "",
  "desc": "ZkSync main architecture"
 },
 {
  "url": "/rif/identity/mvp/learnings/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The MVP - Learnings After this project, we have advanced in different areas of the field of self-sovereign identity. The greatest challenges are found when developing the different protocols to implement communication between applications First of all, there is no standard protocol to authenticate the identity of users when using public services. During this MVP we developed a simple authentication protocol and developed an abstract implementation simple to use in any Express.js service. This resulted in our current project called rLogin: it consists of a standard protocol to authenticate users, a front-end tool for developers to allow their users to choose any cryptocurrency wallet to operate with the services. When we try to solve the problem of communication between services, we found an interesting use case that we have not yet developed: a credential issuer could require other pre-issued credentials from a user to validate their identity. As a result of this we are working on a repository of standard schemas for credentials, which allows users to port their identity in the different models that apply verifiable credentials. Another field we explore is cloud storage: we developed a simple implementation of a data vault. Users…"
 },
 {
  "url": "/wallet/use/ledger/",
  "title": "Ledger App",
  "category": "",
  "tags": "json-rpc, ledger, rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/solutions/liquality/",
  "title": "Liquality - Solutions on RSK",
  "category": "",
  "tags": "liquality, metamask, wallet, swap, rsk-solutions, rsk",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/multisig/sdk/listing/",
  "title": "RIF Multisig SDK - Transaction listing",
  "category": "",
  "tags": "rif, gnosis, multisig",
  "date": "",
  "desc": "Safe transaction listing"
 },
 {
  "url": "/rif/storage/providers/swarm/guides/local-network-incentives/",
  "title": "Running a local Swarm network on Rootstock (RSK)",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "This guide sets up 2 Swarm nodes in a local private network. Each of the nodes is loaded into a specific directory; i.e. the folders ./s1 and ./s2. The Swarm Accounting Protocol (SWAP) is required in order to form an incentivized network in Swarm. This requires chequebook Smart Contracts which keep track of the accounting done between Swarm nodes, and therefore there is need for a blockchain. If you need these nodes to run without incentivization, please refer to the much simpler Standard version of this guide. Table of Contents Requirements Run the network Interact with the network Restart the network Add more nodes to the network Known issues Requirements 1. RSKj RSKj will be the node used to start the local Rootstock (RSK) blockchain. Download it from: Google Drive Swarm (make sure to rename the downloaded file to rskj-core-unformatted-log-all.jar) 2. websocat (optional) websocat is a command-line web socket client, used to query the nodes running in the private network. If you plan to query the nodes, follow the instructions here to…"
 },
 {
  "url": "/rif/storage/providers/swarm/guides/local-network/",
  "title": "Running a local Swarm network",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "This guide sets up 2 Swarm nodes in a local private network. Each of the nodes is loaded into a specific directory; i.e. the folders ./s1 and ./s2. Swarm can be run without a blockchain, since each node—with the help of the bootnodes—will form a network with its peers through Kademlia. It is through the Swarm Accounting Protocol (SWAP) that Smart Contracts come into play in Swarm, in order to form an incentivized network. If you need these nodes to run with incentivization, please refer to the incentivized version of this guide. Table of Contents Requirements Run the network Interact with the network Restart the network Add more nodes to the network Requirements websocat (optional) websocat is a command-line web socket client, used to query the nodes running in the private network. If you plan to query the nodes, follow the instructions here to install it. Run the network 1. Choose a directory Start a terminal and run cd to move to a directory where the files for the nodes will be created. 2. Start each…"
 },
 {
  "url": "/rif/storage/pinning/local_cli/",
  "title": "RIF Storage Pinning service - Local setup with storage dev CLI",
  "category": "",
  "tags": "rif, rif-storage, ipfs, rif-pinning, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "This guide is quite advanced and assumes a greater knowledge of how to setup local blockchain environment, IFPS, etc. Repositories Storage Smart Contracts: github.com/rsksmart/rif-marketplace-storage Storage Development CLI: github.com/rsksmart/rif-storage-cli Steps Clone all repos, run npm install globally. Start up Ganache In Smart Contracts repo using truffle deploy deploy contracts and take note of the StorageManager contract address. Go to Storage Development CLI and create an Offer for the given contract address (use the npm run bin script) Go to Pinning Service repo and configure it to use the deployed contract. You can use environment variables, local.json or CLI parameters for this. Run npm run init - this will bootstrap IPFS repos in .repos folder and configure the ports settings. In one tab run npm run ipfs:consumer daemon In another tab run npm run ipfs:provider daemon Create Offer. Suggested way is using the Storage Development CLI. Use npm run bin and don’t forget to configure the correct contract address. Note the Offer ID (which is the address of your RSK account from which you have created the Offer) Run npm run bin -- --offerId…"
 },
 {
  "url": "/rif/marketplace/mainnet/",
  "title": "RIF Marketplace Mainnet",
  "category": "",
  "tags": "rif, marketplace, mainnet",
  "date": "",
  "desc": "You can access the Marketplace on the Rootstock (RSK) Mainnet: marketplace.rifos.org Wallet Setup Download a browser wallet. Recommended: Liquality Wallet Connect your wallet to RSK Mainnet. You can do it with the top right selector (connect dApp) on Liquality Wallet. (optional) List RIF token balance using this address: 0x2acc95758f8b5f583470ba265eb685a8f45fc9d5. In Liquality wallet, you can do this in the manage assets tab - add custom token - select chain (RSK) - contract address. Browse the RIF Marketplace to access the available services. Smart contracts Name Services - NFTS Placements NFTS Proxy: 0xa966be39a13723D991dfa92B2B0cf6B0c7416eE5 NFTS ProxyAdmin: 0xBa7958AA482fe532F54998443c768E6323e957B5 NFTS Implementation: 0x712025c9fe1CA55296cE439c4aC04019c266A5B1 Storage Services - Manager Storage Proxy: 0xa18c181229F374b00f126fC952775d41A4F4c40e Storage ProxyAdmin: 0x03860e12049248F5198010f9FA004A0832bbbbEb Storage Implementation: 0xA06EE5485ebc2F4D0388d43C54d4d8B64e5D9a45 Staking (Storage) Staking: 0xe82Eb1C0D40D555b8030116132EdA0B9f1032263 RNS Manager (to register and manage RNS Domains) manager.rns.rifos.org"
 },
 {
  "url": "/rif/rns/mainnet/",
  "title": "RNS Mainnet",
  "category": "",
  "tags": "rif, rns, rif-name-service, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RNS 0xcb868aeabd31e2b66f74e9a55cf064abb31a4ad5 Resolver 0xD87f8121D44F3717d4bAdC50b24E50044f86D64B RSK Registrar RSKOwner: 0x45d3e4fb311982a06ba52359d44cb4f5980e0ef1 FIFSRegistrar: 0x779195c53cc7c1a33bd2eea5f63f2c1da8798d61 FIFSAddrRegistrar: 0xd9c79ced86ecf49f5e4a973594634c83197c35ab Renewer: 0x7a9872a7615c475b62a62b8f6e491077fb05f663 NamePrice: 0xd09adf13e482928e47e96dd6f02aad1daf7a5a47 BytesUtils: 0xe9e32c20cbce0ad4f16377bd9a84554828e86a06 Reverse ReverseRegistrar:0xd25c3f94a743b93ecffecbe691beea51c3c2d9d1 NameResolver: 0x4b1a11bf6723e60b9d2e02aa3ece34e24bde77d9 RSK Registrar legacy TokenRegistrar (auction): 0x5269f5bc51cdd8aa62755c97229b7eeddd8e69a6 Legacy resolvers Public Resolver: 0x4efd25e3d348f8f25a14fb7655fba6f72edfe93a MultiChain Resolver: 0x99a12be4C89CbF6CFD11d1F2c029904a7B644368 RNS Manager manager.rns.rifos.org"
 },
 {
  "url": "/solutions/math-wallet/",
  "title": "Math Wallet - Solutions on RSK",
  "category": "",
  "tags": "Math Wallet, rsk-solutions, rsk, wallet, bitcoin, defi, dApps, blockchain, cryptowallet",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/armadillo/merged-mining/",
  "title": "Armadillo - Merged Mining",
  "category": "",
  "tags": "armadillo, guard, security, guides, bitcoin, rsk, peer-to-peer, merged-mining, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/wallet/use/metamask/",
  "title": "MetaMask",
  "category": "",
  "tags": "json-rpc, metamask, rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/operations/migrate-from-auction/",
  "title": "Migrate from auction model",
  "category": "",
  "tags": "rif, rns, rif-name-service, domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Any name that has been registered using the Auction Model contract should be migrated to the new registration model. Login to the RNS Manager. You will see the following alert in the admin tab if your name has not been migrated yet. Click on “migrate”, sign the transaction, and you’re done! To renew you domain’s rent time, migrate your domain! From now on, every new domain registered under .rsk top level domain will be managed by the RSKOwner contract. This contract is in charge of domain expirations. Once you have migrated your name, follow this guide to renew your domain’s expiration. If a name is not migrated before expiration, you will lose the domain ownership. In that case, you will be prompted to [register](/rif/rns/operations/Register-a-name) your domain again."
 },
 {
  "url": "/rif/rlogin/migrating/",
  "title": "rLogin - Migrating",
  "category": "",
  "tags": "rlogin, rif, rif-identity, web3, react, frontend, dapp, metamask, ledger, trezor, dcent, liquality, portis",
  "date": "",
  "desc": "rLogin - Migrating - guide to migrate from other login solutions"
 },
 {
  "url": "/rif/identity/libraries/mnemonics/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, node, mnemonics, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Mnemonic module Identity derivation tools using mnemonic phrases Repo: https://github.com/rsksmart/rif-identity.js/tree/develop/packages/rif-id-mnemonic"
 },
 {
  "url": "/rif/rlogin/libraries/modal/",
  "title": "",
  "category": "",
  "tags": "rlogin, modal, rif, rif-identity, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "See rLlogin main docs"
 },
 {
  "url": "/solutions/moneyonchain/",
  "title": "Money on Chain - Solutions on RSK",
  "category": "",
  "tags": "MoC, rsk-solutions, rsk, stablecoin, bitcoin, defi",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/integrate/multichain-address-resolution/",
  "title": "Multi-chain address resolution guidelines",
  "category": "",
  "tags": "rif, rns, multi-chain, rif-name-service, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Resolving a chain address (for example, a Bitcoin address) associated to a domain consist of 4 steps: Obtain the identifier of the domain. Use namehash algorithm Get the domain’s resolver contract. Use resolver(bytes32) Detect if contract supports chainAddr(bytes32,bytes4) interface via ERC-165 interface detection. Use supportsInterface(bytes4) with interface ID: 0x8be4b5f6 ERC-165 spec Query for address resolution. Use chainAddr(bytes32,bytes4) with the domain identifier and the chain hexa identifier chainAddr(bytes32,bytes4) spec function getAddr(domain, chain) { const node = namehash(domain) const resolver = rns.resolver(node) if (!resolver.supportsInterface(&#39;0x8be4b5f6&#39;)) throw; return resolver.chainAddr(node, chain); }"
 },
 {
  "url": "/wallet/use/mycrypto/",
  "title": "MyCrypto",
  "category": "",
  "tags": "mycrypto, json-rpc, rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/wallet/use/myetherwallet/",
  "title": "MyEtherWallet",
  "category": "",
  "tags": "mew, myetherwallet, json-rpc, rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/architecture/rsk-registrar/other/nameprice/",
  "title": "Name Price",
  "category": "",
  "tags": "rif, rns, rif-name-service, name price, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "MainNet: 0xd09adf13e482928e47e96dd6f02aad1daf7a5a47 TestNet: 0x794f99f1a9382ba88b453ddb4bfa00acae8d50e8 Smart contract Determines the price of a domain. Years Price 1 2 RIF 2 4 RIF 2+k 4+k RIF Public methods price price function price (string calldata /*name*/, uint /*expires*/, uint duration) external view returns(uint); Calculate name price in RIF token for a given duration Is a pure function, but converted to view due the AbstractNamePrice spec. duration of the name to register in years Return price in RIF tokens."
 },
 {
  "url": "/guides/armadillo/network-under-attack/",
  "title": "Armadillo - Network Under Attack",
  "category": "",
  "tags": "armadillo, guard, security, guides, bitcoin, rsk, peer-to-peer, merged-mining, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/wallet/use/nifty/",
  "title": "Nifty",
  "category": "",
  "tags": "nifty, json-rpc, rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/gateways/dataservices/chainlink/node-operators/",
  "title": "RIF Gateways Chainlink Node Operators",
  "category": "",
  "tags": "rif, gateways, data services, chainlink, node operators",
  "date": "",
  "desc": "Node Operators - Connect your Chainlink node to Rootstock (RSK) Testnet Provided you have a functioning Chainlink node, and are interested in trying the Rootstock (RSK) Initiator and RSKTX Adapters to interact with Rootstock Network, you can follow these instructions to get started. Prerequisites. You’ll need to create a Postgres database for the Initiator and another for the Adapter. You can quickly set this up with the psql CLI utility: psql -U postgres -c &quot;create database rsk_initiator&quot; psql -U postgres -c &quot;create database rsktx_adapter&quot; 1. Clone the repository and enter project directory git clone https://github.com/smartcontractkit/chainlink-RSK.git &amp;amp;&amp;amp; cd chainlink-RSK 2. Configure the Initiator and Adapter Create a .env-testnet file for each service and set the configuration environment variables. Rootstock (RSK) Initiator Key Description Example CHAINLINK_BASE_URL The URL of the Chainlink Core service with a trailing slash http://localhost:6688/ DATABASE_URL The URL of the Postgres connection postgresql://user:passw@host:5432/dbname INITIATOR_HOST The hostname of the Rootstock Initiator localhost INITIATOR_NAME The Initiator…"
 },
 {
  "url": "/rif/identity/libraries/node-utils/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, libraries, utils, node, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Node Utils Repo: https://github.com/rsksmart/rif-identity-services/tree/develop/packages/rif-node-utils"
 },
 {
  "url": "/solutions/nownodes/",
  "title": "NOWNodes - Solutions on RSK",
  "category": "",
  "tags": "nownodes-docs",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/guide/operations/",
  "title": "Operations - RNS User guide",
  "category": "",
  "tags": "rns, guide, rns-user-guide",
  "date": "",
  "desc": "How to login to your domain, extend your domain expiration time, transfer your domain, change the Rootstock address, add a cryptocurrency address, update a cryptocurrency address, delete a cryptocurrency address, activate multi chain functionality, create a subdomain, change a subdomain&#39;s owner, delete a subdomain"
 },
 {
  "url": "/solutions/oraclemoneyonchain/",
  "title": "Oracle Money on Chain - Solutions on RSK",
  "category": "",
  "tags": "OMOC, rsk-solutions, rsk, stablecoin, bitcoin, defi, MOC",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/armadillo/overview/",
  "title": "Armadillo - Overview",
  "category": "",
  "tags": "armadillo, guard, security, guides, bitcoin, rsk, peer-to-peer, merged-mining, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/dex/overview/",
  "title": "Overview - The Complete Guide to Decentralized Exchanges (DEX)",
  "category": "",
  "tags": "the-complete-guide-to-dexes, decentralized-exchanges, tutorial, overview, guides, tokens, sovryn, rskswap,tokenbridge, cross-chain, bridge, web3, bitcoin, rsk, peer-to-peer, blockchain, lend, borrow, yield-farming, order-books, automated-market-maker- AMMs",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/get-crypto-on-rsk/overview/",
  "title": "Get Crypto on RSK",
  "category": "",
  "tags": "knowledge-base, crypto, buy, swap, exchange, wallets, powpeg",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/nft/overview/",
  "title": "Overview | Deploy an NFT project on the RSK Testnet",
  "category": "",
  "tags": "NFTs, tutorial, overview, guides, tokens, web3, bitcoin, rsk, peer-to-peer, blockchain, nft, ERC-721, smart-contract, hardhat, ethersjs, ipfs, metamask, testnet, pinata",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/quickstart/overview/",
  "title": "RSK Quick Start Guide | Overview",
  "category": "",
  "tags": "quick-start, getting-started, guide, how-to, bitcoin, rsk, peer-to-peer, merged-mining, blockchain, powpeg",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/stablecoin/overview/",
  "title": "Overview - The Complete Guide to Stablecoins",
  "category": "",
  "tags": "the-complete-guide-to-stablecoins, stablecoins, tutorial, overview, guides, tokens, defiant, tokenbridge, cross-chain, bridge, web3, bitcoin, rsk, peer-to-peer, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/two-way-peg-app/overview/",
  "title": "Overview | 2 way peg app Documentation",
  "category": "",
  "tags": "2 way peg, powpeg, peg-in, peg-out, 2way-peg, bridge, rbtc, btc, testnet, mainnet, guide, setup, integrate, use",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/relay/overview/",
  "title": "RIF Relay Overview",
  "category": "",
  "tags": "rif, envelope, relay, gas station network, gsn, overview",
  "date": "",
  "desc": "Most blockchains have native cryptocurrency to pay for transaction fees and gas consumption; this simple design has many benefits. First, to bootstrap an economy, the native cryptocurrency model creates an initial demand for it. Second, it simplifies the interaction between users and miners because it forces them to use the same means of payment. Third, it reduces the complexity of the consensus rules. Finally, it provides Denial of Service (DoS) protection to the network as full nodes can pay what the miners expect to include a received transaction. This way nodes can decide to propagate a transaction or not, preventing the free consumption of network bandwidth, and stop spam transactions. Cryptocurrencies tend to be associated with volatility and to counter measure this fact, Stablecoins were introduced. Stablecoins bridge the worlds of cryptocurrency and everyday fiat currency because their prices are pegged to a reserve asset like the U.S. dollar or gold. But with the advent of Decentralized Finance (DeFi), several stable coins have become a preferred means of payment and savings for both users and miners, therefore, separate systems to facilitate alternative payment mechanisms. Transactions that enable paying transactions with any coin other than the native currency are named meta-transactions…"
 },
 {
  "url": "/guides/full-stack-dapp-on-rsk/part1-overview/",
  "title": "The Complete Full Stack dApp Guide on RSK - Part 1:Overview",
  "category": "",
  "tags": "the-complete-full-stack-dapp-guide, full-stack, dapp, tutorial, overview, front-end, guides, smart-contracts, web3, bitcoin, rsk, peer-to-peer, dapp-examples, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/full-stack-dapp-on-rsk/part2-smart-contracts/",
  "title": "The Complete Full Stack dApp Guide on RSK - Part 2:Smart Contracts",
  "category": "",
  "tags": "the-complete-full-stack-dapp-guide, full-stack, dapp, tutorial, overview, front-end, guides, smart-contracts, web3, bitcoin, rsk, peer-to-peer, dapp-examples, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/full-stack-dapp-on-rsk/part3-front-end/",
  "title": "The Complete Full Stack dApp Guide on RSK - Part 3:Front End",
  "category": "",
  "tags": "the-complete-full-stack-dapp-guide, full-stack, dapp, tutorial, overview, front-end, guides, smart-contracts, web3, bitcoin, rsk, peer-to-peer, dapp-examples, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/libraries/web3/personal/",
  "title": "web3.personal",
  "category": "",
  "tags": "web3, libraries, console, rpc, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/multisig/sdk/policies/",
  "title": "RIF Multisig SDK - policies",
  "category": "",
  "tags": "rif, gnosis, multisig",
  "date": "",
  "desc": "Creation of the transactions required to change safe policies (owners and threshold)"
 },
 {
  "url": "/tutorials/ethereum-devs/port-ethereum-dapps/",
  "title": "Port Ethereum dApps",
  "category": "",
  "tags": "tutorial, rsk, ethereum dapps, ethereum, solidity",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/get-crypto-on-rsk/powpeg-btc-rbtc/",
  "title": "How to get RBTC using RSK’s built in PowPeg",
  "category": "",
  "tags": "rbtc, rsk, powpeg, 2-way peg, defi, exchange, crypto, buy, peg-in, peg-out, how-to",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/identity/specs/presentation-timestamps/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, timestamps, credentials, DID, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Presentations timestamps Emitting and validating presentations with timestamps A use case of the Verifiable Credential model7 is the presentation of credentials person to person, using QR codes. This article expresses some considerations that are important when implementing verification of this kind of presentations. Verifiable Presentations (VP) should always be signed by a DID controller. VC presentations (VP) must contain a presentation_date and, optionally, an expiration_date. Verifier should check both dates to make sure it is a Presentation that was signed at the verification time. If no expiration_date is present the Verifier should have a (configurable) parameter presentation_grace from the presentation_date, for example presentation_grace=1 minute. This prevents replay attacks. A recommended verification user experience is: Verifier asks credential to Holder Holder selects a credential Holder taps on show QR button Holder shows QR Verifier scans QR Verifier app verifies VP Verifier app displays presented credentials information Verifier validates information To prove that the person presenting the credential is really the owner of the credential, it is advisable to request that they present a verified photo of themselves, or other kind of physical proof The verifier app could stablish…"
 },
 {
  "url": "/rif/multisig/product/",
  "title": "The RIF Multisig Product",
  "category": "",
  "tags": "rif, gnosis, multisig",
  "date": "",
  "desc": "Overview of the RIF Multisig, Savings and Vault Solution"
 },
 {
  "url": "/rif/identity/data-vault/architecture/provider/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, data-vault, architecture, provider, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Data vault - Centralized pinner provider A Centralized Data Vault provider compatible with RIF Data Vault standard interface. It stores content in an IPFS node associated to a given DID and key. It is strongly recommended to encrypt the content saved in IPFS using this package. Features Stores, retrieve, deletes and swaps content from/in an IPFS node Associates did* -&amp;gt; key -&amp;gt; cid in a SQLite local DB so it is not needed to remember the just created cid Pins and unpins cids in the given IPFS node Limited storage per did *DIDs are saved in lowercase to ensure checksum compatibility across different wallets. Usage The IPFS Centralized pinner provider was designed to use in Centralized pinner service but can be used as standalone Basic instance Plug and play configuration import { ipfsPinnerProviderFactory, IpfsPinnedCid, IpfsMetadata } from &#39;@rsksmart/ipfs-cpinner-provider&#39; import { createConnection } from &#39;typeorm&#39; const ipfsApi = &#39;http://localhost:5001&#39; const database = &#39;my-ipfs-pinner-provider.sqlite&#39; const Entities = [IpfsPinnedCid, IpfsMetadata] const dbConnection = await createConnection({ type: &#39;sqlite&#39;, database, entities: Entities, logging: false, dropSchema: true, synchronize: true }) const ipfsPinnerProvider = await ipfsPinnerProviderFactory({ dbConnection, ipfsApiUrl, maxStorage }) // NOTE: ipfsApiUrl is optional. Default value…"
 },
 {
  "url": "/rif/gateways/dataservices/chainlink/public-repos/",
  "title": "RIF Gateways Chainlink Public repositories",
  "category": "",
  "tags": "rif, gateways, chainlink, github, repositories",
  "date": "",
  "desc": "Check out our public repositories: Chainlink/Rootstock Integration"
 },
 {
  "url": "/rif/gateways/triggers/notifier/public-repos/",
  "title": "RIF Notifier Public repositories",
  "category": "",
  "tags": "rif, notifier, github, repositories",
  "date": "",
  "desc": "Check out our public repositories: RIF Notifier"
 },
 {
  "url": "/rif/marketplace/public-repos/",
  "title": "RIF Marketplace Public repositories",
  "category": "",
  "tags": "rif, marketplace, github, repositories",
  "date": "",
  "desc": "Check out the RIF public repositories RIF Marketplace UI RIF Marketplace Cache RIF Marketplace NFTS Contract RIF Marketplace Storage Contract RIF Marketplace File Upload Service RIF Marketplace Dev Environment"
 },
 {
  "url": "/rif/scheduler/sdk/purchasing-plan/",
  "title": "RIF Scheduler - SDK - Purchasing Plans",
  "category": "",
  "tags": "",
  "date": "",
  "desc": "Purchasing executions With the information of the previous step, you can approve and purchase executions to be able to schedule them in the future. If the token is one of the supported ERC-677 you don’t need to approve before purchasing. You can pass the list of supported tokens using config.supportedERC677Tokens import { RIFScheduler } from &quot;@rsksmart/rif-scheduler-sdk&quot;; const config = { contractAddress: serviceProviderContractAddress, providerOrSigner: signer } const rifScheduler = new RIFScheduler(config); const executionsQuantity = 2; const plan = rifScheduler.getPlan(planIndex) const totalAmount = plan.pricePerExecution.mul(executionsQuantity) // First, check if token requires approval if (plan.token.needsApproval(totalAmount)) await plan.token.approve(totalAmount) const purchaseTransaction = await plan.purchase(executionsQuantity) await purchaseTransaction.wait(12)…"
 },
 {
  "url": "/rif/scheduler/sdk/query-plans/",
  "title": "RIF Scheduler - SDK - Querying Plans",
  "category": "",
  "tags": "",
  "date": "",
  "desc": "Querying a plan To schedule a transaction you need to purchase a plan. Plans are paid in tokens or RBTC. First of all, you need to get a plan from the service provider, which will give you the price per execution, the payment token,the execution window in seconds, the maximum gas that an execution can spend and its status. import { RIFScheduler } from &quot;@rsksmart/rif-scheduler-sdk&quot;; const config = { contractAddress: serviceProviderContractAddress, providerOrSigner: signer } const rifScheduler = new RIFScheduler(config); const planIndex = 0; const plan = rifScheduler.getPlan(planIndex) // { // pricePerExecution: 10000000000000; // window: 300; // token: Token; // gasLimit: 200000; // active: true; // ... // } Querying ALL plans If you want to obtain all plans from the service provider, you must first get the plans count and then get the plans one by one. &amp;lt;span…"
 },
 {
  "url": "/tutorials/quiz-app-to-dapp/",
  "title": "RSK Workshop: Quiz App to dApp",
  "category": "",
  "tags": "rsk, workshop, solidity, javascript, swarm",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/rbank/",
  "title": "RBank",
  "category": "",
  "tags": "knowledgebase, rsk, rif , rbank, open-finance, tools, building blocks",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/get-crypto-on-rsk/rbtc-exchanges/",
  "title": "How to get RBTC using Exchanges",
  "category": "",
  "tags": "rbtc, rsk, wallets, defi, exchange, crypto, how-to, knowledge-base",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/get-crypto-on-rsk/rbtc-wallets/",
  "title": "How to get RBTC using wallets",
  "category": "",
  "tags": "rbtc, rsk, wallets, defi, exchange, crypto, how-to, knowledge-base",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/multisig/sdk/rbtc/rbtc_transactions/",
  "title": "RIF Multisig SDK - Send RBTC",
  "category": "",
  "tags": "rif, gnosis, multisig, rbtc",
  "date": "",
  "desc": "follow these steps to send gas on the multisig account and to create raw transactions"
 },
 {
  "url": "/rif/multisig/sdk/erc20/receive_erc20/",
  "title": "RIF Multisig SDK - Receive ERC20 token",
  "category": "",
  "tags": "rif, gnosis, multisig, erc20",
  "date": "",
  "desc": "follow these steps to receive erc20 tokens through multisig transactions"
 },
 {
  "url": "/rif/multisig/sdk/erc721/receive_erc721/",
  "title": "RIF Multisig SDK - Receive ERC721 token",
  "category": "",
  "tags": "rif, gnosis, multisig, erc721",
  "date": "",
  "desc": "follow these steps to receive erc721 tokens through multisig transactions"
 },
 {
  "url": "/rif/multisig/sdk/rbtc/receive_rbtc/",
  "title": "RIF Multisig SDK - Receive RBTC",
  "category": "",
  "tags": "rif, gnosis, multisig, rbtc",
  "date": "",
  "desc": "follow these steps to receive gas on the multisig account"
 },
 {
  "url": "/rif/identity/references/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, reference, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "References RFC-7519 - JSON Web Token (JWT) Decentralized Identifiers (DIDs) v1.0 Ethr DID Method Specification BIP-0039 - Mnemonic code for generating deterministic keys BIP-0032 - Hierarchical Deterministic Wallets RSKIP-0057 - Derivation Path for Hierarchical Deterministic Wallets Verifiable Credentials Data Model 1.0 Ethereum: A secure decentralised generalised transaction ledger (yellow paper) BIP-44 - Multi-Account Hierarchy for Deterministic Wallets Wikipedia - Challenge–response authentication RFC-1994 - PPP Challenge Handshake Authentication Protocol (CHAP) Verifiable Credentials JSON Schema Specification The OAuth 2.0 Authorization Framework HTTP Authentication Scheme Registry EIP-155 - Simple replay attack protection EIP-191 - Signed Data Standard A successful Git branching model Gitflow Workflow"
 },
 {
  "url": "/rif/rns/operations/register-auction-deprecated/",
  "title": "Register a domain - Deprecated",
  "category": "",
  "tags": "rif, rns, rif-name-service, domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "This contract has been deprecated. Please find the new registration process [here](Register-a-name). The process consists of two main phases: The auction phase The annual rent payment The auction phase Any user can start an auction for any available domain name. It is a public auction that respects the Vickrey auction principles. A Vickrey auction is a type of blind auction. Bidders submit written bids without knowing the bid of the other people in the auction. The highest bidder wins, but the price paid is the second-highest bid. The good obtained after the auction is a domain registered under the rsk top level domain in the RIF Name Service running on the Rootstock (RSK) blockchain. The Vickrey auction process consists of 4 phases: Open: A domain’s default state. Any user can start an auction for any name that remains in Open state. This auction is also recorded in the blockchain, and can be accessed by any other user. Auction: Auction started. Any user can place a bid for the domain auctioned. This phase lasts 3…"
 },
 {
  "url": "/rif/rns/operations/register-subdomain/",
  "title": "Set subdomain owner",
  "category": "",
  "tags": "rif, rns, rif-name-service, domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "This operation can be performed for either register a new subdomain or change an existing subdomain’s owner. Go to RNS Manager Login with your domain Go to admin page In subdomains section, type the subdomain label you want to register/transfer Set the subdomain owner by clicking on edit"
 },
 {
  "url": "/rif/rns/operations/register/",
  "title": "Register a domain",
  "category": "",
  "tags": "rif, rns, rif-name-service, domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The process consists of three main steps: Go to the RNS Manager. You need to check if your name is available. Search the name you want to register. If your name is available, click on “register your domain”, and go to the next step. Select the duration for which you would like to register your name and check that you have that amount of RIF Tokens Click on “Request to register”. Sign the transaction and wait for one minute. We’re almost done! After approximately one minute, the “Register” button will be enabled. Click on it! Find here all available features."
 },
 {
  "url": "/rif/rns/architecture/registry/",
  "title": "Registry",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The RNS Registry is the contract that stores the ownership of the nodes. Registry mainnet Address: 0xcb868aeabd31e2b66f74e9a55cf064abb31a4ad5 ABI: RNSABI.json See RNS Testnet section for testing environment information. Index Abstract Acquire a domain Set a subdomain Change the Resolver Transfer ownership Release a domain ownership Structure Methods owner setOwner setSubnodeOwner resolver setResolver ttl setTTL setDefaultResolver Abstract Node The node is the main structure of the RIF Name Service Registry. A node has an owner, a Resolver and a time to live (TTL). A node owner can: Register sub nodes derived from it, with their owners Set the node’s Resolver: Resolvers are responsible for performing resource lookups for a name - for instance, returning a contract address, a content hash, or IP address(es) as appropriate. Set the node’s TTL: the caching time-to-live. Transfer node’s ownership The root node The root node is the parent of top-level domains. This node is located in the &amp;lt;code…"
 },
 {
  "url": "/rif/rns/specs/registry/",
  "title": "RNS Specs - Registry",
  "category": "",
  "tags": "rif, rns, rif-name-service, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The registry contract provides a simple mapping between a domain and its resolver. Everything related to domain ownership is managed in this contract, including ownership transfer and sub-domain creation. Each registry entry refers to a resolver which handles the resolution between the name domain and the desired resource. The RNS Registry contract exposes functions for accessing data and functions to modify data: Access Ownership function owner(bytes32 node) constant returns (address); Returns the owner (registrar) of the specified node. Resolution function resolver(bytes32 node) constant returns (address); Returns the resolver for the specified node. Caching function ttl(bytes32 node) constant returns (uint64); Returns the time-to-live (TTL) of the node; that is, the maximum duration for which a node’s information may be cached. Modify Ownership function setOwner(bytes32 node, address owner); Transfers ownership of a node to another registrar. This function may only be called by the current owner of node. A successful call to this function logs the event Transfer(bytes32 indexed, address). function setSubnodeOwner(bytes32 node, bytes32 label, address owner); …"
 },
 {
  "url": "/rif/multisig/sdk/rejecting/",
  "title": "RIF Multisig SDK - rejecting",
  "category": "",
  "tags": "rif, gnosis, multisig",
  "date": "",
  "desc": "Steps required to reject a transaction"
 },
 {
  "url": "/kb/remix-and-metamask-with-rsk-testnet/",
  "title": "Using Remix and Metamask with RSK testnet",
  "category": "",
  "tags": "tutorial, rsk, remix, metamask",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/operations/renew/",
  "title": "Renew a domain",
  "category": "",
  "tags": "rif, rns, rif-name-service, domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Don’t forget to migrate your name before renewing it! The renewal process is under development. Find the due date here."
 },
 {
  "url": "/rif/rns/architecture/rsk-registrar/renewers/renewer/",
  "title": "Renewer",
  "category": "",
  "tags": "rif, renewer, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Rootstock (RSK) MainNet: 0x7a9872a7615c475b62a62b8f6e491077fb05f663 Rootstock (RSK) TestNet: 0xe48ad1d5fbf61394b5a7d81ab2f36736a046657b Has renewer role in RSK Owner. Smart contract Accepts payments via ERC-20 approve() + register().3 ERC-721 transferAndCall().4 Calculates price using NamePrice contract. It has an owner that can2 change name price contract. Public methods price renew price function price (string memory name, uint expires, uint duration) public view returns(uint); Returns the price of a name in RIF name not used. Pass &#39;&#39; expires not used. Pass 0 duration to register the name for. renew function renew(string calldata name, uint duration) external; Renews a name in Node Owner. This method should be called if the domain is owned by someone. You must have previously executed approve() for the amount of tokens to be transferred. name The name to register. duration Time to register in years. &amp;lt;h2…"
 },
 {
  "url": "/kb/resolve-nifty-issue/",
  "title": "Resolve Nifty Wallet Issue",
  "category": "",
  "tags": "tutorial, nifty, chainId, address, derivation, bip44, slip44",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/operations/resolve/",
  "title": "Resolve a domain address",
  "category": "",
  "tags": "rif, rns, rif-name-service, domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The Resolver contract handles the resolution between the name domain and the resource. Each Registry entry references a Resolver. To find a domain’s resolution: Go to RNS Manager resolution page Type the domain you want to resolve Resolve! &amp;lt;!– ## Libraries Resolution libraries are available for developers to integrate and resolve RNS domains and subdomains in their own applications, wallets, exchanges. ## Resolution process The resolution can be described in two steps: 1. Query the RNS to retrieve the domain’s resolver: js const name = &#39;satoshi.rsk&#39; const node = namehash() const resolverAddress = rns.resolver(node) if (resolverAddress == &#39;0x00&#39;) console.error(&#39;No resolver configured for &#39; + name) else console.log(&#39;Resolver address configure for &#39; + name + &#39; is &#39; + resolverAddress) Yielded address may be 0x00 if the Resolver is not configured or the domain node is not yet present in the Registry. 2. Finally resolve the domain through the addr getter from the Resolver: js const resolver = ResolverInterface.at(resolverAddress) const address = resolver.addr(node) if (address == &#39;0x00&#39;) console.error(&#39;The domain &#39; + name + &#39; does not resolve to any address!&#39;) else console.log(&quot;The domain &quot; + name +&quot; resolves to &quot; + address)…"
 },
 {
  "url": "/rif/rns/specs/resolvers/",
  "title": "RNS Specs - Resolvers",
  "category": "",
  "tags": "rif, rns, rif-name-service, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Resolvers may implement any subset of the record types specified here. Where a record types specification requires a resolver to provide multiple functions, the resolver MUST implement either all or none of them. Resolvers MUST specify a fallback function that throws. Resolvers must implement ERC-165 interface detection standard. supportsInterface method must return if the interfaceID queried is simply equal to the signature hash of the function that resolves the desired resource record. Currently standardized resolver interfaces are specified below. Check out definitive resolver for implementation details. Contract address Provides the contract address for the specified domain. function addr(bytes32 node) returns (address); node: the namehash of the domain to query for. Returns the contract address of the specified domain. A zero address is returned if the node has no address specified. When updated emits event AddrChanged(bytes32 indexed node, address a); Interface ID: 0x3b3b57de Specification: EIP-137 Resolution protocol: Query the resolver address to the registry. Query addr to…"
 },
 {
  "url": "/rif/rns/integrate/reverse-resolution/",
  "title": "Reverse address resolution",
  "category": "",
  "tags": "rif, rns, rif-name-service, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Finding the domain associated with an address consists of X steps: Obtain the identifier of the address reverse records. Generate the RNS domain for a given account’s reverse records. Convert the address to hexadecimal representation in lower-case, and append addr.reverse. For instance, the address 0x112234455c3a32fd11230c42e7bccd4a84e02010 might have its reverse records associated at 112234455c3a32fd11230c42e7bccd4a84e02010.addr.reverse. Use namehash algorithm with the reverse record domain to get the identifier of the address. Get its resolver contract. Use resolver(bytes32) Detect if contract supports name(bytes32) interface via ERC-165 interface detection. Use supportsInterface(bytes4) with interface ID: 0x691f3431 ERC-165 spec Query for name resolution. Use name(bytes32) with the domain identifier. name(bytes32) spec function reverseResolve (address) { const reverseName = `${address.slice(2).toLowerCase()}.addr.reverse`; const node = namehash(reverseName); const resolver = rns.resolver(node); const name = resolver.&amp;lt;span…"
 },
 {
  "url": "/kb/rootstock-metamask/",
  "title": "How to add Rootstock to Metamask Programmatically",
  "category": "",
  "tags": "rsk, rootstock, dApps, blockchain, smart-contracts, wallets, ethereum, programming, how-tos, tutorial, guide, developer",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/integrate/rsk-address-resolution/",
  "title": "Rootstock (RSK) Address Resolution guidelines",
  "category": "",
  "tags": "",
  "date": "",
  "desc": "Resolving an Rootstock (RSK) address associated to a domain consist of 4 steps: Obtain the identifier of the domain. Use namehash algorithm Get the domain’s resolver contract. Use resolver(bytes32) Detect if contract supports addr(bytes32) interface via ERC-165 interface detection. Use supportsInterface(bytes4) with interface ID: 0x3b3b57de ERC-165 spec Query for address resolution. Use addr(bytes32) with the domain identifier. addr(bytes32) spec function getAddr(domain) { const node = namehash(domain) const resolver = rns.resolver(node) if (!resolver.supportsInterface(&#39;0x3b3b57de&#39;)) throw; return resolver.addr(node); }"
 },
 {
  "url": "/kb/rsk-api/",
  "title": "RSK API",
  "category": "",
  "tags": "tutorial, rsk, cli",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/identity/libraries/rsk-ethr-did/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Seamless RSK DIDs on RSK Repo: https://github.com/rsksmart/rif-identity.js/tree/develop/packages/rif-id-ethr-did"
 },
 {
  "url": "/tools/truffle/boxes/rsk-next-box/",
  "title": "Truffle Box (rsk-next-box)",
  "category": "",
  "tags": "tutorial, rsk, truffle, truffle-box, next",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tools/truffle/boxes/rsk-react-express-box/",
  "title": "Rsk react-express box",
  "category": "",
  "tags": "tutorial, rsk, truffle, truffle-box, react, express",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tools/truffle/boxes/rsk-starter-box/",
  "title": "RSK starter box",
  "category": "",
  "tags": "truffle, ganache, quick-start, dapps, rsk-starter-box, truffle-boxes, open zeppelin, testing, networks, deployment, npm, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, guides, tutorial",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tools/explorer/rsk/",
  "title": "RSK",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/rskj-for-developers/",
  "title": "RSKj for Developers",
  "category": "",
  "tags": "knowledge-base, rskj, rsk, node, blockchain, developers, wallets",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/rskj/",
  "title": "Getting Started with RSKj",
  "category": "",
  "tags": "knowledge-base, rskj, rsk, node, blockchain, developers, wallets",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/architecture/rsk-registrar/rskowner/",
  "title": "Rootstock (RSK) Owner",
  "category": "",
  "tags": "rif, rns, rif-name-service, registrar, rsk-owner, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "RSK MainNet: 0x45d3e4fb311982a06ba52359d44cb4f5980e0ef1 RSK TestNet: 0xca0a477e19bac7e0e172ccfd2e3c28a7200bdb71 Smart contract Owner of rsk top level domain. It can setSubdomainOwner in RNS. It represents domain ownership implementing ERC-7211 non-fungible token standard. This standard provides basic functionality to track and transfer NFTs2. Stores domains’ expiration time. The expiration time determines whether a domain is owned or not. Determines if a domain is available to be purchased. Accepts domain ownership clamming from previous rsk registrar. Grants access to other contracts for registering new domains (registrar role)2. Grants access to other contracts for renewing domains (renewer role)2. Allows to reclaim ownership in RNS of owned domains. It has an owner that can2 Change rsk tld resolver and ttl. Add/remove registrar contracts. Add/remove renewer contracts. Implementation Rootstock (RSK) Owner is an Ownable contract and represents domain labels ownership fully compatible with ERC-721 interface using OpenZeppelin’s implementation. The implementation is divided into two main parts: The public methods exposed by Rootstock (RSK) Owner, and the restricted access methods to manage upgrades to the solution. The latter will not be described in this article. Public methods available ERC-721…"
 },
 {
  "url": "/rif/rns/run-locally/",
  "title": "Run RNS locally",
  "category": "",
  "tags": "rif, rns, rif-name-service, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "More information coming soon! Collaborate on Github"
 },
 {
  "url": "/rif/identity/mvp/run/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "The MVP - Run Locally Running the project consists of XXX main steps. To understand all the process please read architecture &amp;amp; design article first 1. Run the infrastructure Requirements: Rootstock (RSK) node with eth_getLogs enabled - public nodes are: For RSK Mainnet https://did.rsk.co:4444 For RSK Testnet https://did.testnet.rsk.co:4444 IPFS node on the same environment that the services will run Guides to run an IPFS node https://docs.ipfs.io/how-to/command-line-quick-start/ Make sure you are able to pin files using this IPFS node 2. Configure and run the services Clone the repo from https://github.com/rsksmart/rif-identity-services and checkout v0.1.0 First of all set-up generals of all services Each of the services needs specific (easy) configuration. To configure the service please follow each service-specific, and can be run as standalone. See the guides in each service’s READMEs: Issuer service Data Vault service Convey service The services are seamlessly run using Docker. See the guide here 3. Serve the services You will need to serve the services on public HTTPS server to enable access from mobile applications. To do so you can: Run a cloud server…"
 },
 {
  "url": "/rif/scheduler/run/",
  "title": "RIF Scheduler - Run your own scheduler",
  "category": "",
  "tags": "rif, rif-scheduler, sdk, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "By running your own scheduler you can provide the transaction execution service. In this article you can see how to deploy smart contracts and run the service that will execute the transactions. 1. Deploy the smart contracts The SP will deploy the smart contract that will keep track of: plans paid tokens scheduled transactions execution states Read more about the smart contracts here First of all, clone the repo and set it up as explained in the Readme. Also, find the deployment scripts in the readme. You will find one for local networks, other for Rootstock (RSK) Testnet and other for Rootstock (RSK) Mainnet. WARNING: Please note that the contract requires Solidity 0.8 or newer. Compiling it with older versions will expose it to security vulnerabilities. In the deployment you will need to provide two addresses in the constructor: address serviceProvider_: Can create and remove plans. Can change the payee. address payee_: Receives the tokens paid after executions. uint256 minimumTimeBeforeExecution_: Minimum amount of seconds required between the moment of the scheduling and the execution time requested. This must be greater than 15, it protects the service provider…"
 },
 {
  "url": "/rif/storage/providers/swarm/run/",
  "title": "Running Swarm for the first time",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "1. Check the swarm command is in the PATH Verify this with which swarm. If the swarm command cannot be found, you can add the Swarm binary route to your PATH for easier access. Alternatively, you will need to use $GOPATH/bin/swarm instead, assuming you are compiling directly from the source code. 2. Execute the swarm command To boot up Swarm for the first time simply execute: swarm 3. Specify a private key You will need a private key (sometimes referred to as account) to use Swarm. This can either: be specified by the bzzaccount flag (if the account already exists) be created through a Swarm prompt (if not specified) Note that after used once, an account will continue to be used by default if not specified the next time. 4. Verify the client is running If Swarm was started successfully, the local web server endpoint should be accessible through your browser, by default at http://localhost:8500. This web interface will allow you to upload and download files manually. In contrast, the terminal in which swarm was executed will allow…"
 },
 {
  "url": "/rif/multisig/sample-application/",
  "title": "RIF Multisig - Savings and Vault Solution - Sample Application",
  "category": "",
  "tags": "rif, gnosis, multisig, sdks, react",
  "date": "",
  "desc": "Sample application for the RIF Multisig - Savings and Vault project showing the multisig SDKs usage."
 },
 {
  "url": "/rif/rlogin/samples/",
  "title": "rLogin - sample apps",
  "category": "",
  "tags": "rlogin, rif, rif-identity, web3, react, frontend, dapp, metamask, ledger, trezor, dcent, liquality, portis",
  "date": "",
  "desc": "rLogin - sample apps - This is a list of samples apps built with rLogin"
 },
 {
  "url": "/rif/scheduler/sdk/scheduling/",
  "title": "RIF Scheduler - SDK - Scheduling Executions",
  "category": "",
  "tags": "",
  "date": "",
  "desc": "Scheduling a single execution Here you can see how to schedule the execution of any smart contract. This will be executed by the service provider according to the date and time specified in executedAt. Keep in mind that the execution will occur in a time frame given by the plan window that you purchased earlier. import { RifScheduler, Execution } from &quot;@rsksmart/rif-scheduler-sdk&quot;; import { utils } from &quot;ethers&quot;; const config = { contractAddress: serviceProviderContractAddress, providerOrSigner: signer } const rifScheduler = new RIFScheduler(config); const plan = rifScheduler.getPlan(planIndex); const encodedFunctionCall = new utils.Interface(MyContract.abi).encodeFunctionData(&#39;&amp;lt;MyContractFunction&amp;gt;&#39;, [arrayOfMyContractFunctionParameters]) const valueToTransfer = BigNumber.from(0) const execution = new Execution(config, plan, myContractAddress,…"
 },
 {
  "url": "/kb/send-tokens-through-metamask/",
  "title": "Send RIF Tokens through Metamask",
  "category": "",
  "tags": "tokens, metamask, rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/identity/data-vault/architecture/service/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, data-vault, architecture, service, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Data vault - Centralized IPFS pinner service A Centralized Data Vault service compatible with RIF Data Vault standard interface. It stores content in an IPFS node associated to a given DID and key. It is a centralized pinner because it provides a centralized service that maps the necessary metadata (ie: user did and key) associated to the IPFS cids so it can be accessed seamlessly. Main features: - API for storing, updating and deleting, accessible only proving DID control - uses DID Auth - Open API for retrieving data - It is strongly recommended to encrypt the content saved in IPFS using this package. It is an API designed using IPFS Centralized Pinner Provider It is easy to use via Web Client SDK It has three layers: - HTTP layer: exposes a simple HTTP REST API to interact with from any web client. - Service provider layer: an internal interface that abstracts the way the content is stored. - File system layer: defines where and how the metadata is stored. ### Usage The IPFS Centralized pinner service is designed to let users store content for free. That content is pinned into IPFS. Content is stored in `did -&amp;gt; key…"
 },
 {
  "url": "/rif/scheduler/services/",
  "title": "RIF Scheduler - Services",
  "category": "",
  "tags": "rif, rif-scheduler, sdk, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Repo: rsksmart/rif-scheduler-services The Service Providers will run the scheduler service that will track all new requested transactions and execute them in the correct time &amp;gt; See this guide to run a scheduler on your own ## Architecture The service works as a caché system. It collects information from another source of trust: The smart contract. - Stores the requested transactions in a SQLite database (configurable) - Runs every 5 minutes collecting transactions that need to be executed (configurable) - Connects to Rootstock (RSK) node using web sockets – it uses eth_getLogs and eth_subscribe RPC methods - It executes transactions storing a private key in a file – this can be easily improved - It does not expose any HTTP API ## Model It has 5 core components - Recoverer – recovers all the requested executions when the service was asleep - Listener – notifies the service when new executions are listed - Collector – recurrently collects all the transactions that need to be executed - Scheduler – sets alarms for collected executions - Executor – executes the requested transaction at the given time The service in designed to allow any of its modules to be switched for different implementations.…"
 },
 {
  "url": "/rif/rns/operations/set-addr/",
  "title": "Set address resolution",
  "category": "",
  "tags": "rif, rns, rif-name-service, domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "This operation is used to set the address resolution of a domain. If you are using your domain to receive assets, you may use this guide to change the wallet address where you receive payments. Go to RNS Manager Login Go to admin page If you are using a standard resolver, an admin resolution button will appear. Click on it. Beside ‘addr’ click on edit an insert the desired address Click on set and you are done!"
 },
 {
  "url": "/rif/rns/operations/set-btc-address/",
  "title": "Set chain address resolution",
  "category": "",
  "tags": "rif, rns, rif-name-service, domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "This operation is used to set a chain address resolution of a domain. If you are using your domain to receive assets, you may use this guide to change the wallet address where you receive payments. Go to RNS Manager Login Go to admin page If you are using the multi chain resolver, an admin resolution button will appear. Click on it. If you are not using multi-chain resolver, follow these instructions. Select the chain you would like to update and click on edit Input the new address, click on edit and you are done!"
 },
 {
  "url": "/rif/rns/operations/set-resolver/",
  "title": "Set resolver",
  "category": "",
  "tags": "rif, rns, rif-name-service, domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "This operation is used to change the resource record types for a domain. Use this guide to set multi-chain resolver for your domain. Go to RNS Manager Login Go to admin page Click on edit beside resolver. Choose the resolver you want to set and click on edit."
 },
 {
  "url": "/rif/rns/operations/set-reverse/",
  "title": "Find the name of an address",
  "category": "",
  "tags": "rif, rns, rif-name-service, domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "This process describes how to expose a name for an owned address. This requires you have the keys to unlock the account. Go to RNS Manager Login Go to admin page Find the ‘set reverse’ button at the bottom of the page and click on it. Find my account’s name"
 },
 {
  "url": "/tutorials/ethereum-devs/setup-truffle-oz/",
  "title": "How to create a new project using Truffle and OpenZeppelin connected to RSK network",
  "category": "",
  "tags": "tutorial, rsk, openzeppelin, truffle",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/gateways/triggers/notifier/setup/",
  "title": "RIF Notifier Setup and Install",
  "category": "",
  "tags": "rif, notifier, setup, install",
  "date": "",
  "desc": "This page provides a guide for developers to setup and install the RIF Notifier project. ### Contents: 1. Installation Guide * Docker Installation * Prerequisites for docker installation * Docker Installation * Local Installation * Prerequisites for local installation * Local Installation 2. Usage Guide 1. Preconditions 2. Notifier Provider CLI 3. Notifier Consumer CLI 4. Start the application ## Installation guide RIF Notifier can be installed to run locally or in a docker container. Local installation can be performed by following the steps in Local Installation. To run rif-notifier in a docker container, follow the instructions in Docker Installation Steps. ## Setup ### Prerequisites for docker installation #### 1. Docker Make sure you have docker installed in your machine. If not, download from https://www.docker.com/products/docker-desktop #### 2. git The latest version of the git client can be installed through: shell sudo apt update sudo apt install git ### Docker Installation Steps * Open a terminal. * Install git by following the steps in prerequisites for docker installation. * Clone this repo using git clone https://github.com/rsksmart/rif-notifier rif-notifier and switch to the rif-notifier directory by using command cd rif-notifier * Install notifier provider cli by following steps in notifier provider cli…"
 },
 {
  "url": "/rif/marketplace/guide/setup/",
  "title": "Setup - RIF Marketplace User Guide",
  "category": "",
  "tags": "rif, marketplace, guide",
  "date": "",
  "desc": "RIF Marketplace User Guide"
 },
 {
  "url": "/rif/rns/guide/setup/",
  "title": "Setup - RNS User guide",
  "category": "",
  "tags": "rns, guide, rns-user-guide",
  "date": "",
  "desc": "Compatible wallets, connect Nifty wallet to Rootstock (RSK), connect Metamask wallet to Rootstock (RSK), get RBTC, get RIF Tokens, display amount of tokens in the Nifty wallet, display amount of tokens in the Metamask wallet"
 },
 {
  "url": "/webinars/202006-004/slides/",
  "title": "How to Upload a Website on RIF Storage",
  "category": "",
  "tags": "rif, swarm, dweb, slides",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202007-005/slides/",
  "title": "Testing Smart Contracts with Truffle",
  "category": "",
  "tags": "rsk, solidity, truffle, test, mocha, slides",
  "date": "",
  "desc": ""
 },
 {
  "url": "/webinars/202008-005/slides/",
  "title": "Testing Smart Contracts with OZ CLI",
  "category": "",
  "tags": "rsk, solidity, truffle, test, mocha, slides",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/libs/smart-contracts/",
  "title": "Full smart contracts suite",
  "category": "",
  "tags": "rif, rns, rif-name-service, javascript,  domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Import contracts using npm. Registry Abstract RNS Registry and a 0.5.0 implementation. Source: https://github.com/rnsdomains/rns-registry npm: https://www.npmjs.com/package/@rsksmart/rns-registry npm i @rsksmart/rns-registry Resolver Addr Resolver and Multi-chain resolver. Source: https://github.com/rnsdomains/rns-resolver npm: https://www.npmjs.com/package/@rsksmart/rns-resolver npm i @rsksmart/rns-resolver Reverse Reverse Registrar and Name Resolver. Source: https://github.com/rnsdomains/rns-reverse npm: https://www.npmjs.com/package/@rsksmart/rns-reverse npm i @rsksmart/rns-reverse ERC-677 Token ERC-677 Token contract implementation, compatible with RIF Token implementation. Use it for testing purposes. Source: https://github.com/rnsdomains/erc677 npm: https://www.npmjs.com/package/@rsksmart/erc677 npm i @rsksmart/erc677 Auction Registrar 0.5.0 implementation of Rootstock (RSK) Auction Registrar (outdated). Source: https://github.com/rnsdomains/rns-auction-registrar npm: https://www.npmjs.com/package/@rsksmart/rns-auction-registrar npm i @rsksmart/rns-auction-registrar Rootstock (RSK) Registrar Current Rootstock (RSK) Registrar. Source: https://github.com/rnsdomains/rns-rskregistrar npm: https://www.npmjs.com/package/@rsksmart/rns-rskregistrar npm i @rsksmart/rns-rskregistrar Locally install full suite Run current architecture of RNS in a local network. Source: https://rsksmart.com/rsksmart/rns-full-suite git clone https://github.com/rsksmart/rns-full-suite.git cd rns-full-suite npm i truffle develop truffle(develop)&amp;gt; migrate"
 },
 {
  "url": "/guides/rif-relay/smart-wallets/",
  "title": "RIF Relay Smart Wallets",
  "category": "",
  "tags": "rif, envelope, relay, user, guide, smart, wallet",
  "date": "",
  "desc": ""
 },
 {
  "url": "/solutions/sovryn/",
  "title": "Sovryn - Solutions on RSK",
  "category": "",
  "tags": "sovryn, rsk-solutions, rsk, defi, bitcoin",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/stablecoin/stablecoin-on-bitcoin/",
  "title": "Stablecoins on Bitcoin - The Complete Guide to Stablecoins",
  "category": "",
  "tags": "the-complete-guide-to-stablecoins, stablecoins, tutorial, overview, guides, tokens, defiant, tokenbridge, cross-chain, bridge, web3, bitcoin, rsk, peer-to-peer, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/stablecoin/stablecoin-vs-digital-assets/",
  "title": "The difference between stablecoins and other digital assets - The Complete Guide to Stablecoins",
  "category": "",
  "tags": "the-complete-guide-to-stablecoins, stablecoins, tutorial, overview, guides, tokens, defiant, tokenbridge, cross-chain, bridge, web3, bitcoin, rsk, peer-to-peer, blockchain",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/scheduler/sdk/states/",
  "title": "RIF Scheduler - SDK - Getting status",
  "category": "",
  "tags": "",
  "date": "",
  "desc": "Verifying the status of a scheduled execution You can either get the execution by id or use any Execution instance if you have one already. import { RifScheduler } from &quot;@rsksmart/rif-scheduler-sdk&quot;; const config = { contractAddress: serviceProviderContractAddress, providerOrSigner: signer } const rifScheduler = new RIFScheduler(config); const execution = await rifScheduler.getExecution(executionId) const status = await execution.getState() // enum ExecutionState { // NotScheduled = 0, // Scheduled = 1, // ExecutionSuccessful = 2, // ExecutionFailed = 3, // Overdue = 4, // Refunded = 5, // Cancelled = 6 // } What you can do with this sdk? Getting Started Query plans Purchase one of this plans Schedule a transaction for the next minutes Get states"
 },
 {
  "url": "/tools/stats/",
  "title": "RSK Stats",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/libs/rns-artifacts/resolver/string-resolver/",
  "title": "RNS Solidity artifacts - String Resolver",
  "category": "",
  "tags": "rif, rns, rif-name-service, artifacts, javascript,  domains, address, integrate, resolver, string-resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "String Resolver provides an RNS domain of a string resolution. Rootstock (RSK) Mainnet: 0x2e4ae4ce78261f0efd8d859cf54966d7b2a7ae11 Rootstock (RSK) Testnet: 0xc980a15304b70a6a00ce8fd376e8ce78e15c5dd8 It provides two methods: function str(bytes32 node) external view returns (string memory) Returns the current str record for a domain. Params: node domain Returns: str record function setStr(bytes32 node, string calldata newStr) external onlyNodeOwner(node) Sets the str record for a domain. Params: node domain newStr record value Emits: event NewStr(bytes32 indexed node, string str)"
 },
 {
  "url": "/rif/gateways/triggers/notifier/subscription-plans/",
  "title": "RIF Notifier - Setup Subscription Plan",
  "category": "",
  "tags": "rif, notifier, setup, subscription plan",
  "date": "",
  "desc": "This page provides a guide for developers to set up the subscription plans offered by provider for the RIF Notifier project. Contents: Create Subscription Plan Update Subscription Plan Disable Subscription Plan Create Subscription Plan Run the command notifier-prov-cli create subscriptionplan or notifier-prov-cli create subscriptionplan --docker to create subscription plan in local machine or docker container. Update Subscription Plan Run the command notifier-prov-cli edit subscriptionplan or notifier-prov-cli edit subscriptionplan --docker to update a subscription plan in local machine or docker container. Disable subscription plan Run the command notifier-prov-cli disable subscriptionplan or notifier-prov-cli disable subscriptionplan --docker to disable a subscription plan in local machine or docker container."
 },
 {
  "url": "/solutions/defiant/tagalog/",
  "title": "Defiant - Solutions sa RSK",
  "category": "",
  "tags": "defiant, rsk-solutions, rsk, tagalog",
  "date": "",
  "desc": ""
 },
 {
  "url": "/solutions/kriptonmarket/tagalog/",
  "title": "Merkado ng Kripton – On at off Ramp Solution sa RSK",
  "category": "",
  "tags": "kripton-market, tagalog, defi, exchange, crypto, buy, rsk-solutions, rsk, on-ramp, off-ramp",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/marketplace/services/rnsdomains/techspecs/",
  "title": "RIF Marketplace RNS Tech Specs",
  "category": "",
  "tags": "rif, marketplace, rns, domains, technical",
  "date": "",
  "desc": "RIF Name Service (RNS) enables the use of human readable names for blockchain addresses helping users to receive transactions in personalized domains. The Name Services (RNS) Marketplace allows users to buy and sell RNS domains. Sellers can list their owned domains and set a listing price in RIF for each of them. Buyers can browse the available Domains and purchase the one they prefer by paying the listed price. ## User Flows * High-level use cases with operations within the RNS Marketplace* ### [Seller] Selling an RNS Domain 1. List an RNS Domain for sale by submitting two transactions. - Specify the price in RIF - (future) Specify payment currency among the options available. 2. Send approval Domain transfer transaction. (Transaction 1/2) 3. List in the Marketplace by submitting the Placement transaction. (Transaction 2/2) ### [Seller] Cancel a listed RNS Domain 1. Removing a listed RNS Domain from the Marketplace by submitting two transactions. 2. Send approval Domain transfer transaction. (Transaction 1/2) 3. Send the unplacement transaction to remove the Domain from the Marketplace. (Transaction 2/2) ### [Buyer] Buy an RNS Domain A Buyer can browse the available RNS Domains, filter based on the selected criteria and…"
 },
 {
  "url": "/rif/marketplace/services/storage/techspecs/",
  "title": "RIF Marketplace Storage Tech Specs",
  "category": "",
  "tags": "rif, marketplace, storage, IPFS, technical",
  "date": "",
  "desc": "Storage Services allows Providers of decentralized storage to register their offers, defining a capacity, a storage system (IPFS only), and a set of subscription/pricing plans. Consumers can browse the available offers and rent the desired space to store the required content, having the option to upload it directly or simply replicate it among different Providers, if required. The service is implemented through a Smart Contract that handles all Storage Offers and Agreements in a transparent and decentralized way. The RIF Storage Pinning service is permanently connected to the Blockchain listening to any activity on the Marketplace so it can proceed and persist the required content in an automated manner, providing simplicity and security to all parties. See the glossary for explanations of various terms. ## User Flows * High-level use cases with operations within the RNS Marketplace* ### Creating new Offer [Provider] 1. User goes to Marketplace and starts the creation process. 2. User account address (eq. the future Offer Id) is read from Metamask and the displayed steps to be carried out, including the prefilled commands to run: shell $ npm install -g @rsksmart/rif-storage-pinner $ rif-pinner init --offerId &amp;lt;user account address&amp;gt; 3. User installs the…"
 },
 {
  "url": "/rif/templates/",
  "title": "RIF Templates",
  "category": "",
  "tags": "rif, templates, typescript, react, sdk",
  "date": "",
  "desc": "Quick templates to bootstrap your projects."
 },
 {
  "url": "/solutions/tenderly/",
  "title": "Tenderly - Solutions on RSK",
  "category": "",
  "tags": "tenderly, rsk-solutions, rsk, troubleshooting, defi, dApps, blockchain, smart-contracts",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/storage/providers/swarm/testnet-network/",
  "title": "Connecting to testnet Swarm network",
  "category": "",
  "tags": "rif, rif-storage, ipfs, swarm, storage, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "What is the RIF Storage testnet The RIF Storage testnet allows developers and end-users to get a feeling with how it is to interact with a decentralized storage protocol. For now, RIF Storage is integrated with Swarm. On top of this, we are also integrating with IPFS (more to be announced soon!) and we are developing the specifications for the gateways, marketplaces and pinning services A crucial difference between the testnet, just launched by us, and the official Swarm testnet is the usage of the RIF Token to incentivize bandwidth accounting in the RIF Storage testnet. Ultimately, the vision of both Swarm and RIF is to support multiple currencies under the same network, but until that vision becomes a reality we want to give developers in the RIF ecosystem the opportunity to try out the user experience of RIF Storage, using the RIF (test) token. ## Hands-on Be one of the first to interact with the Swarm testnet and download a special surprise! ### Gateway TLDR; RIF Storage is operating a gateway service, so you can interact with Swarm without running the software yourself. Please navigate here and verify that you can upload a file and download it from…"
 },
 {
  "url": "/rif/gateways/dataservices/chainlink/testnet/",
  "title": "RIF Gateways Chainlink Testnet",
  "category": "",
  "tags": "rif, gateways, chainlink, testnet",
  "date": "",
  "desc": "Smart contracts RIF/BTC Price Reference Aggregator 0xd793fd691dF2934B412e250460bEd76d807f05eb To join as a Node Operator: Configure a job in Chainlink to get RIF/USD price from Liquid.com. Login to the Chainlink Operator WebUI and add the following job. Replace RSK_INITIATOR_NAME, ORACLE_CONTRACT_ADDRESS and RSKTX_ADAPTER_NAME with your values. For the purpose of adding the node to the testnet Reference Aggregator, configure the tasks to fetch last traded price of RIF/BTC pair on Liquid.com exchange. Once this step is done, provide the JobID and Oracle contract address to the Aggregator owners to be included. { &quot;initiators&quot;: [ { &quot;type&quot;: &quot;external&quot;, &quot;params&quot;: { &quot;name&quot;: &quot;RSK_INITIATOR_NAME&quot;, &quot;body&quot;: { &quot;address&quot;: &quot;ORACLE_CONTRACT_ADDRESS&quot; } } } ], &quot;tasks&quot;: [ { &quot;type&quot;: &quot;httpget&quot;, &quot;params&quot;: { &quot;get&quot;: &quot;https://api.liquid.com/products/580&quot; } }, { &quot;type&quot;: &quot;jsonparse&quot;, &quot;params&quot;: { &quot;path&quot;: &quot;last_traded_price&quot; } }, { &quot;type&quot;: &quot;multiply&quot;, &quot;params&quot;: { &quot;times&quot;: 100000000 } }, { &quot;type&quot;: &quot;ethuint256&quot; }, { &quot;type&quot;: &quot;RSKTX_ADAPTER_NAME&quot; } ] } Token Bridge testnet.tokenbridge.rsk.co/"
 },
 {
  "url": "/rif/marketplace/testnet/",
  "title": "RIF Marketplace Testnet",
  "category": "",
  "tags": "rif, marketplace, testnet",
  "date": "",
  "desc": "You can access the Marketplace on the Rootstock (RSK) Testnet: marketplace.testnet.rifos.org Wallet Setup Download a browser wallet. Recommended: Liquality Wallet Connect your wallet to Rootstock (RSK) Mainnet. You can do it with the top right selector (connect dApp) on Liquality Wallet. (optional) List tRIF token balance using this address: 0x19F64674D8A5B4E652319F5e239eFd3bc969A1fE. In Liquality wallet, you can do this in the manage assets tab - add custom token - select chain (RSK) - contract address. Browse to RSK faucet to get some gas. Browse the tRIF faucet to get some test RIF tokens. Browse the RIF Marketplace - Testnet to access the available services. Smart contracts Name Services - NFTS Placements NFTS Proxy: 0xfa5aDE767A422c66cAFD94c3710F5B92467fb85E NFTS ProxyAdmin: 0xE660A209c733ba0C1331E9997cb31309e7c28A52 NFTS Implementation: 0xcEd09738227b611b4681a1Aa05CDb0D72ebFbEA5 Storage Services - Manager Storage Proxy: 0x839856c0ec1aa2AED25d47Fd3DDb7a14DAC3e76d Storage ProxyAdmin: 0xB0Ec8d94d53b336Eca5b7280a52Ce3D241C98e11 Storage Implementation: 0xFAd0FDd942a5330594E7BBA270460EF8fA8579eC Staking (Storage) Staking: 0x11Be792f8fcfc84897b88E149dD3Fb66B422256f RNS Manager (to register and manage RNS Domains) testnet.manager.rns.rifos.org"
 },
 {
  "url": "/rif/rns/testnet/",
  "title": "RNS Testnet",
  "category": "",
  "tags": "rif, rns, rif-name-service, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "You can access the Marketplace on the RSK Testnet: marketplace.testnet.rifos.org Registration flow Download a browser wallet. Nifty Wallet Connect your wallet to RSK Testnet. You can do it with the top left selector on Nifty Wallet. (optional) List tRIF token balance using this address: 0x19F64674D8A5B4E652319F5e239eFd3bc969A1fE. In Nifty wallet do this in Tokens tab. Browse to RSK faucet to get some gas. Browse to tRIF faucet to get some test RIF tokens. Browse to RNS Testnet Manager and search for your desired domain. Follow the registration process. Note: The Nifty browser wallet has been discontinued. See the Nifty Wallet) page for more information. Smart contracts RNS 0x7d284aaac6e925aad802a53c0c69efe3764597b8 Resolver 0x25C289ccCFFf700c6a38722F4913924fE504De0e RSK Registrar RSKOwner: 0xca0a477e19bac7e0e172ccfd2e3c28a7200bdb71 FIFSRegistrar: 0x36ffda909f941950a552011f2c50569fda14a169 FIFSAddrRegistrar: 0x90734bd6bf96250a7b262e2bc34284b0d47c1e8d Renewer: 0xe48ad1d5fbf61394b5a7d81ab2f36736a046657b NamePrice: 0x794f99f1a9382ba88b453ddb4bfa00acae8d50e8 BytesUtils: 0x7faf084ef72cb71f3383a5c568c70853ac4c298e Reverse ReverseRegistrar:0xc1cb803d5169e0a9894bf0f8dcdf83090999842a NameResolver: 0x8587385ad60038bB181aFfDF687c4D1B80C4787e RSK Registrar legacy TokenRegistrar (auction): 0x3d1a11c623bd21375f2b69f4eec814f4ceeb1d8d Legacy Resolvers Public Resolver: 0x1e7ae43e3503efb886104ace36051ea72b301cdf MultiChain Resolver: 0x404308f2a2eec2cdc3cb53d7d295af11c903414e RNS Manager testnet.manager.rns.rifos.org"
 },
 {
  "url": "/rif/token/",
  "title": "RIF Token",
  "category": "",
  "tags": "rif, token, erc677",
  "date": "",
  "desc": "Information about the RIF token, where to obtain it, how to transfer it, and technical details on its token standard"
 },
 {
  "url": "/kb/tokenbridge-troubleshooting/",
  "title": "RSK Token Bridge Troubleshooting Guide",
  "category": "",
  "tags": "knowledge-base, tokenbridge, blockchain, developers, tokens",
  "date": "",
  "desc": ""
 },
 {
  "url": "/guides/flyover/tools/",
  "title": "Flyover Protocol Documentation | Tools",
  "category": "",
  "tags": "flyover, powpeg, peg-in, peg-out, 2way-peg, bridge, rbtc, btc, testnet, mainnet, guide, setup, integrate, use",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/multisig/transaction-service/",
  "title": "RIF Multisig - Transaction Service",
  "category": "",
  "tags": "rif, multisig, gnosis, service, backend",
  "date": "",
  "desc": "API to keep track of transactions sent via Gnosis Safe smart contracts"
 },
 {
  "url": "/rif/multisig/sdk/transaction_confirmation/",
  "title": "RIF Multisig SDK - transaction confirmation",
  "category": "",
  "tags": "rif, gnosis, multisig",
  "date": "",
  "desc": "Steps required to confirm a transaction"
 },
 {
  "url": "/guides/quickstart/transactions/",
  "title": "RSK Quick Start Guide | Exploring RSK Transactions",
  "category": "",
  "tags": "quick-start, getting-started, guide, how-to, transactions, explorer, bitcoin, rsk, peer-to-peer, merged-mining, blockchain, powpeg",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/operations/transfer/",
  "title": "Renew a domain",
  "category": "",
  "tags": "rif, rns, rif-name-service, domains, address, integrate, resolver, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Under development."
 },
 {
  "url": "/kb/truffle-boxes-prerequisites/",
  "title": "Truffle boxes prerequisites",
  "category": "",
  "tags": "tutorial, rsk, truffle, truffle-box",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/truffle-pet-shop-box/",
  "title": "Using Truffle Boxes with RSK",
  "category": "",
  "tags": "tutorial, rsk, truffle",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/truffle-rsk-next-box/",
  "title": "Using Truffle box rsk-next-box",
  "category": "",
  "tags": "tutorial, rsk, truffle, truffle-box, next",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/truffle-rsk-react-box/",
  "title": "Truffle Box (rsk-react-box)",
  "category": "",
  "tags": "tutorial, rsk, truffle, react",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/truffle-rsk-react-express-box/",
  "title": "Rsk react-express box",
  "category": "",
  "tags": "tutorial, rsk, truffle, truffle-box, react, express",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/truffle-rsk-starter-box/",
  "title": "Using Truffle box rsk-starter-box",
  "category": "",
  "tags": "tutorial, rsk, truffle, truffle-box",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tutorials/ethereum-devs/truffle-test/",
  "title": "Testing smart contracts using Truffle",
  "category": "",
  "tags": "tutorial, rsk, truffle, test",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rns/try-rns/",
  "title": "Try RNS",
  "category": "",
  "tags": "rif, rns, rif-name-service, node, sdk, libraries, infrastructure, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Welcome to RNS! You can use Rootstock (RSK) testnet to try the service for free. Download a browser wallet. Nifty Wallet Connect your wallet to Rootstock Testnet. You can do it with the top left selector on Nifty Wallet. (optional) List tRIF token balance using this address: 0x19F64674D8A5B4E652319F5e239eFd3bc969A1fE. In Nifty wallet do this in Tokens tab. Browse to Rootstock faucet to get some gas. Browse to tRIF faucet to get some test RIF tokens. Browse to RNS Testnet Manager and search for your desired domain. Follow the registration process. Note: The Nifty browser wallet has been discontinued. See the Nifty Wallet) page for more information."
 },
 {
  "url": "/rif/identity/data-vault/use/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, data-vault, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Data Vault - Use WIP"
 },
 {
  "url": "/courses/user-course/",
  "title": "Rootstock User Course",
  "category": "",
  "tags": "rsk, faqs, help, support, course, rootstock, ambassador-program",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/using-blockmason/",
  "title": "Blockmason",
  "category": "",
  "tags": "block-mason, rif, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tools/tokenbridge/usingmycrypto/",
  "title": "Interaction guide using MyCrypto",
  "category": "",
  "tags": "erc20, bridge, mycrypto, defi, node, rbtc, ganache, decentralized, token-bridge, tokens, quick-start, guides, tutorial, testnet, networks, dapps, tools, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, sidechain, contracts",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/rlogin/libraries/vc-json-schemas-parser/",
  "title": "",
  "category": "",
  "tags": "rlogin, rif, rif-identity, libraries, DID, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "rLogin - Verifiable Credentials JSON Schemas parser For more information please read rsksmart/vc-json-schemas"
 },
 {
  "url": "/rif/rlogin/libraries/vc-json-schemas/",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": "rLogin - Verifiable Credentials JSON Schemas For more information please read rsksmart/vc-json-schemas See the VC JSON Schema parser here"
 },
 {
  "url": "/rif/identity/mvp/applications/verifier-app/",
  "title": "",
  "category": "",
  "tags": "rif, rif-identity, libraries, infrastructure, mobile, protocols, mvp, design, rbtc, defi, decentralized, quick-start, guides, tutorial, networks, dapps, tools, rootstock, rsk, ethereum, smart-contracts, install, get-started, how-to, mainnet, testnet, contracts, wallets, web3, crypto",
  "date": "",
  "desc": "Police officers app - QR-scanner-like mobile application (Android) The Police officers app is a mobile application that can be used to scan credentials presented on QR codes. Read the running guide to run the whole project or browse the open-source repo to run locally (please use tag holder-v0.1.2) Take a look at the Figma prototype specifications User interface: the app displays a list of credentials that were verified and the verification status (accepted/rejected) of each. It also displays a button that prompts a QR scanner which is used to scan the holder’s QR. After the scan, the status of the verification and the credential details are displayed. Communication: the app does not need to communicate with the issuer application. All the necessary information to authenticate and verify the credential is shared in the QR. To verify the issuer identity it stores the issuer public key and performs cryptographic verification with signatures shared with the credential. Features Verify presentations displayed from the citizens app via QR code List the historical scanned presentations with verification success indicator"
 },
 {
  "url": "/kb/verify-address-ownership/",
  "title": "Verify Address Ownership",
  "category": "",
  "tags": "metamask, address, account, rif-identity",
  "date": "",
  "desc": ""
 },
 {
  "url": "/kb/verify-smart-contract/",
  "title": "How to verify a Smart Contract on the RSK Block Explorer",
  "category": "",
  "tags": "knowledge-base, rskj, rsk, node, blockchain, developers, block-explorer",
  "date": "",
  "desc": ""
 },
 {
  "url": "/rif/relay/versions/",
  "title": "RIF Relay Versions",
  "category": "",
  "tags": "rif, envelope, relay, gas station network, gsn, versions, changelog",
  "date": "",
  "desc": "The first iteration of RIF Relay was based on the great work done by the Gas Station Network team. ## Version 0.1 RIF Relay V0.1 started as a fork of GSN with two goals in mind: - Be compatible with existing and future smart contracts without requiring such contracts to be adapted to work with RIF Relay. - Be as cost effective as possible. ## Version 0.2 ### Overview RIF Relay V0.2 is a redesign of GSN. It reduces gas costs and simplifies the interaction between the different contracts that are part of the system. It achieves this by: - Securely deploying counterfactual Smart Wallet proxies for each user account: this eliminates the need for relying on _msgSender() and _msgData() functions, making existing and future contracts compatible with RIF Relay without any modification. - Allowing relayers to receive tokens in a worker address under their control and decide what to do with funds later on. - Reducing gas costs by optimizing the GSN architecture. Our main objective is to provide the Rootstock (RSK) ecosystem with the means to enable blockchain applications and end-users (wallet-apps) to pay for transaction fees using tokens (e.g. RIF tokens), and thereby remove the need to…"
 },
 {
  "url": "/rif/aggregation/walkthrough/",
  "title": "RIF Aggregation - Walkthrough",
  "category": "",
  "tags": "rif, aggregation, zksync",
  "date": "",
  "desc": "A step-by-step guide to create your own zksync-based dapp"
 },
 {
  "url": "/rif/rns/guide/value-proposition/wallets/",
  "title": "Full Integration Guide and Value proposition of RNS for Wallets",
  "category": "",
  "tags": "rns, guide, wallets, value",
  "date": "",
  "desc": "Phase 1: Problems to solve, UX proposal, Send BTC example, Feature summary, RNS Integration guidelines. Phase 2:  Problems to solve, Feature summary"
 },
 {
  "url": "/tutorials/workshop-js-testing/",
  "title": "RSK Workshop: Javascript Testing",
  "category": "",
  "tags": "rsk, workshop, javascript, testing, mocha",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tutorials/workshop-prereqs/",
  "title": "RSK Workshop: Pre-requisites",
  "category": "",
  "tags": "rsk, workshop, pre-requisites",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tutorials/workshop-smart-contract-testing-ozcli/",
  "title": "RSK Workshop: Smart Contract Testing using OpenZeppelin CLI",
  "category": "",
  "tags": "rsk, workshop, solidity, testing, openzeppelin, oz-cli",
  "date": "",
  "desc": ""
 },
 {
  "url": "/tutorials/workshop-smart-contract-testing-truffle/",
  "title": "RSK Workshop: Smart Contract Testing using Truffle",
  "category": "",
  "tags": "rsk, workshop, solidity, testing, truffle",
  "date": "",
  "desc": ""
 },
 {
  "url": "/feed.xml",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/sitemap.xml",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/robots.txt",
  "title": "",
  "category": "",
  "tags": "",
  "date": "",
  "desc": ""
 },
 {
  "url": "/quick-start/step1-install-rsk-local-node/",
  "title": "Quick Start - Step 1",
  "category": "",
  "tags": "quick-start,, rskj",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "quick start - install RSK local node - prep environment, verify and install RSKj"
 },
 {
  "url": "/quick-start/step2-install-truffle-and-ganache/",
  "title": "Quick Start - Step 2",
  "category": "",
  "tags": "quick-start,, truffle,, ganache",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "quick start - tutorial project, install truffle, install ganache"
 },
 {
  "url": "/quick-start/step3-edit-smart-contract/",
  "title": "Quick Start - Step 3",
  "category": "",
  "tags": "quick-start,, solidity",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "quick start - smart contracts, solidity"
 },
 {
  "url": "/quick-start/step4-compile-and-deploy/",
  "title": "Quick Start - Step 4",
  "category": "",
  "tags": "quick-start,, compile,, deploy,, regtest,, truffle",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "quick start - compile smart contracts, deploy smart contracts to regtest"
 },
 {
  "url": "/quick-start/step5-run-smart-contract/",
  "title": "Quick Start - Step 5",
  "category": "",
  "tags": "quick-start,, smart-contract,, truffle,, web3",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "quick start - smart contract interactions through web3 REPL"
 },
 {
  "url": "/rsk/",
  "title": "RSK Blockchain",
  "category": "",
  "tags": "rsk",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "What is RSK?"
 },
 {
  "url": "/rsk/node/",
  "title": "Node (RSKj)",
  "category": "",
  "tags": "rsk,, rskj,, node",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Learn more about RSKj, a node implementation for the RSK blockchain"
 },
 {
  "url": "/rsk/node/architecture/",
  "title": "Architecture",
  "category": "",
  "tags": "rsk,, rskj,, node,, architecture",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Architecture of RSK nodes: JSON-RPC, Web3, and storage."
 },
 {
  "url": "/rsk/node/architecture/json-rpc/",
  "title": "JSON-RPC",
  "category": "",
  "tags": "rsk,, rskj,, node,, rpc",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "The JSON-RPC methods supported by RSK nodes."
 },
 {
  "url": "/rsk/public-nodes/",
  "title": "Using RSK Public Nodes (Mainnet &amp; Testnet) provided by IOVLabs",
  "category": "",
  "tags": "rsk,, networks,, versions,, rpc,, mainnet,, testnet,, cUrl",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "RSK Nodes: Public nodes (Mainnet, Testnet), Versioning, RPC Methods, and cUrl example"
 },
 {
  "url": "/rsk/node/install/",
  "title": "Install",
  "category": "",
  "tags": "",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Ensure that your system meets the minimum requirements before installing the RSK nodes on it. Install RSK Node and Join the RSK Papyrus Mainnet RSK nodes can be installed on all major platforms, including Linux, Windows, and Mac. Here we provide step-by-step instructions for all supported platforms. Depending on your network performance, it usually takes 10 to 15 mins to setup a working node on Mainnet. Supported Systems and Methods Type Platform Supported Methods Local Linux Ubuntu Package, CentOS, Fat JAR, Docker Local Mac Fat JAR, Docker Local Windows Fat JAR, Docker Cloud AWS AWS AMI, Ubuntu Package, Docker Cloud Azure Azure VM Image, Ubuntu Package, Docker Cloud Google Ubuntu Package, Fat JAR, Docker Using Ubuntu Package Visit Setup…"
 },
 {
  "url": "/rsk/node/install/update/",
  "title": "RSK Node Updates",
  "category": "",
  "tags": "rsk,, rskj,, node,, update,, version",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How to update RSKj, the RSK node, to a newer version, and verify that it works correctly. Also sign up for updates to get notified when there is a new version released."
 },
 {
  "url": "/rsk/node/install/requirements/",
  "title": "Hardware requirements",
  "category": "",
  "tags": "hardware,, specs,, requirements",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Minimum hardware requirements for RSK"
 },
 {
  "url": "/rsk/node/install/docker/",
  "title": "How to setup an RSK node on Docker",
  "category": "",
  "tags": "docker,, desktop,, macOS,, rskj,, windows,, install,, rsk,, node,, how-to,, network,, requirements,, mainnet,, testnet,, regtest",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Before installing Docker, ensure your system meets the minimum requirements before installing the RSK node. Install Docker Desktop Client Docker Desktop provides an easy and fast way for running containerized applications on various operating systems. For Mac OSX and Windows: Download and install Start the Docker Desktop client Login with a Docker Hub free account For Linux: Install Docker Engine Community Note that you will need to use sudo for all docker commands, by default. To avoid this additional steps are required. Ensure that docker is running by running the following command - it should run without any errors. docker ps More information about Docker install here. Install RSKj Using Docker To install an RSK node using Docker, download the RSKj Dockerfiles and supervisord.conf from the artifacts repo or pull the image from Docker Hub. Inside the artifacts repo, you can choose which type of node you are going to install: A node connected to the public RSK Mainnet: Dockerfile.MainNet A node connected to the public RSK Testnet: Dockerfile.TestNet A node connected to a private RegTest…"
 },
 {
  "url": "/rsk/node/install/ubuntu/",
  "title": "Setup node on Ubuntu",
  "category": "",
  "tags": "ubuntu,, install,, rsk,, rskj,, node,, how-to,, network,, requirements,, mainnet",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Make sure your system meets the minimum requirements before installing RSK nodes on it. Install via Ubuntu Package Manager The easiest way to install and run a RSK node on Ubuntu is to do it through Ubuntu Package Manager. Type the commands below to install RSKj on Ubuntu using our PPAs for Ubuntu. The installed repo public key Fingerprint is 5EED 9995 C84A 49BC 02D4 F507 DF10 691F 518C 7BEA. Also, the public key could be found in document Ubuntu Key Server. $ sudo add-apt-repository ppa:rsksmart/rskj $ sudo apt-get update $ sudo apt-get install rskj During the installation, you will be asked to accept the terms and confirm the network. Choose Yes and Enter to accept the license to continue Choose mainnet and press Enter to continue Install via Direct Downloads You can also download the RSKj Ubuntu Package for Hop 4.2.0 and install it with the dpkg command. Follow this download link to download the matching package for your ubuntu system. #…"
 },
 {
  "url": "/rsk/node/install/centos/",
  "title": "Setup node on CentOS",
  "category": "",
  "tags": "rsk,, node,, centos,, install,, rskj,, requirements,, how-to,, network,, configurations,, mainnet",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How to install and run an RSK node on CentOS"
 },
 {
  "url": "/rsk/node/install/java/",
  "title": "Setup node on Java",
  "category": "",
  "tags": "java,, install,, rsk,, rskj,, node,, how-to,, network,, requirements,, mainnet,, jar",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Make sure your system meets the minimum requirements before installing RSK nodes on it. You also need to install Java 8 JDK. For Mac M1 / M2 (Apple Chips) In order to run RSKj on Apple M1/M2 machines using x86 based software, make sure to have Rosetta installed in your device (it should be pre-installed by default on recent versions of macOS). Also you’d need an x86 JDK build. A suggestion could be Azul Zulu 11 (x86) Install the node using a JAR file The Fat JAR or Uber JAR can be downloaded or compiled (in a reproducible way or not). To run the node: Linux, Mac OSX $ java -cp &amp;lt;PATH-TO-THE-RSKJ-JAR&amp;gt; co.rsk.Start Windows C:&amp;gt; java -cp &amp;lt;PATH-TO-THE-RSKJ-JAR&amp;gt; co.rsk.Start Replace &amp;lt;PATH-TO-THE-RSKJ-JAR&amp;gt; with your path to the JAR file. As an example: C:/RskjCode/rskj-core-4.2.0-HOP-all.jar Using import sync Note: This feature is optional. Note: This feature, first released as part of RSKj v2.0.1, is currently experimental. If you don’t want to synchronize your node in the default way, you can…"
 },
 {
  "url": "/rsk/node/install/azure/",
  "title": "Setup node on Azure",
  "category": "",
  "tags": "azure,, desktop,, rpc,, install,, rsk,, rskj,, node,, how-to,, network,, requirements,, mainnet",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Install RskJ Using Azure Follow the instructions below to install and run an RSK node in Azure. By default, the node connects to Mainnet. If you want to change the network read this section. If you want to change some configuration, please refer to the RSK node configuration section. Also you can enable RPC calls to interact with the node (by default it’s disabled). Install The Node Using Azure On Azure, create a resource. Search for RSK, choose the node’s version and click Create. You will see 4 steps after deploying the node: Basics: complete this step with your information. Choose a name for the node, user name, password, subscription and resource group. Size: select your VM options. Check recommended minimum requirements. Settings: configure optional features. Summary: review the summary of what you have set and press Create. Wait for Azure to finish the deployment. Initialize RSK node configuration file settings (you can do it while switching network). Connect your computer to the node using bash. Edit configuration file using vi: &amp;lt;div class=&quot;language-shell…"
 },
 {
  "url": "/rsk/node/install/aws/",
  "title": "Setup node on AWS",
  "category": "",
  "tags": "aws,, console,, VVM,, marketplace,, launch,, desktop,, install,, rsk,, rskj,, node,, how-to,, network,, requirements,, mainnet",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Step 1: Navigate to the AWS Console site: https://console.aws.amazon.com Step 2: On the AWS services dashboard, click on EC2 (Virtual Machines), then on “launch instance” button. Step 3: Click on AWS Marketplace, search for “rsk”, and select the “RSK Node Bamboo v0.x.x MainNet”; Review the prices and select “Continue”. Step 4: Select the instance type. The once disabled doesn’t reach the minimum hardware requirements. Then, click on “Next: configure instance details” Step 5: Optionally change the default values on this screen, and continue clicking on “Next: Add Storage” Step 6: In the Storage section, increase the size to any size that is 50GB or higher, the minimum recommended to run the node, then click on “Next: Add Tags” Step 7: Optionally add a tag to identify the instance, then, click on “Next: Configure Security Group” Step 8: Now create a new rule with the TCP 22 port, and select a source to open the SSH port and be able to connect to the node remotely, then click on “Review and Launch” Step 9: Review the info…"
 },
 {
  "url": "/rsk/node/configure/",
  "title": "Configure",
  "category": "",
  "tags": "rsk,, rskj,, node,, config",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Setting your own config preferences, when using the Java command, Ubuntu, Azure, AWS, or Docker"
 },
 {
  "url": "/rsk/node/configure/cli/",
  "title": "Command Line Interface",
  "category": "",
  "tags": "rsk,, rskj,, node,, cli",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Command Line Interface for RSK"
 },
 {
  "url": "/rsk/node/configure/reference/",
  "title": "Configuration reference",
  "category": "",
  "tags": "rsk,, rskj,, node,, config",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Configuration reference for RSKj"
 },
 {
  "url": "/rsk/node/configure/verbosity/",
  "title": "Configure Verbosity",
  "category": "",
  "tags": "rsk,, rskj,, node,, config,, logs",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Configure RSKj for desired log verbosity, finding log files, and using logback."
 },
 {
  "url": "/rsk/node/configure/switch-network/",
  "title": "Switch network",
  "category": "",
  "tags": "rsk,, rskj,, node,, config,, network,, mainnet,, testnet,, regtest",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How to switch your RSK node between the Mainnet, Testnet, and RegTest networks"
 },
 {
  "url": "/rsk/node/configure/for-mining/",
  "title": "Configure RSKj node for mining",
  "category": "",
  "tags": "rsk,, rskj,, node,, config,, mining",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How to run RSKj in a manner suited for mining."
 },
 {
  "url": "/rsk/node/configure/autominer/",
  "title": "Run with autominer (Ganache-like)",
  "category": "",
  "tags": "rsk,, rskj,, node,, config",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Learn how to run the RSK node with autominer - similar to Ganache default config"
 },
 {
  "url": "/rsk/node/contribute/",
  "title": "Contribute",
  "category": "",
  "tags": "rsk,, rskj,, node,, contribute",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Getting set up with RSKj and contributing towards its development."
 },
 {
  "url": "/rsk/node/contribute/cli/",
  "title": "CLI",
  "category": "",
  "tags": "rsk,, rskj,, node,, contribute,, cli",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How to compile and run an RSKj node from the command line interface."
 },
 {
  "url": "/rsk/node/contribute/linux/",
  "title": "Linux",
  "category": "",
  "tags": "rsk,, rskj,, node,, contribute,, linux",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How to compile and run an RSKj node on Linux. Installing pre-requisites. Get source code. Ensure security chain. Get external dependencies. Compile and run. Configuring your IDE."
 },
 {
  "url": "/rsk/node/contribute/macos/",
  "title": "Mac OSX",
  "category": "",
  "tags": "rsk,, rskj,, node,, contribute,, mac,, osx",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How to compile and run an RSKj node on Mac OSX. Installing pre-requisites. Get source code. Ensure security chain. Get external dependencies. Compile and run. Configuring your IDE."
 },
 {
  "url": "/rsk/node/contribute/windows/",
  "title": "Windows",
  "category": "",
  "tags": "rsk,, rskj,, node,, contribute,, windows",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How to compile and run an RSKj node on Windows. Installing pre-requisites. Get source code. Ensure security chain. Get external dependencies. Compile and run. Configuring your IDE."
 },
 {
  "url": "/rsk/node/reproducible/",
  "title": "Reproducible Build",
  "category": "",
  "tags": "rsk,, node,, compile,, reproducible,, checksum",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "A deterministic build process used to build RSK node JAR file. Provides a way to be reasonable sure that the JAR is built from GitHub RSKj repository. Makes sure that the same tested dependencies are used and statically built into the executable."
 },
 {
  "url": "/rsk/node/security-chain/",
  "title": "Ensure security chain of RskJ source code",
  "category": "",
  "tags": "rsk,, rskj,, node,, security,, verification",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "All the different ways that you can verify RSKj: Release signing key, fingerprint of the public key, SHA256SUMS.asc, binary dependencies, secure environment script"
 },
 {
  "url": "/rsk/node/network-upgrade/",
  "title": "Network Upgrades",
  "category": "",
  "tags": "rsk,, rskj,, node,, contribute,, upgrade,, protocol,, consensus,, rskip.",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How to introduce consensus rules changes using network upgrades on an RSK node. What to consider. Adding a new rule. Running tests with new rules."
 },
 {
  "url": "/rsk/node/troubleshooting/",
  "title": "Troubleshooting",
  "category": "",
  "tags": "rsk,, rskj,, node,, faq,, troubleshoot",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How to solve some known or frequently encountered issues when working with RSKj"
 },
 {
  "url": "/rsk/node/peer-scoring-system/",
  "title": "Peer Scoring System",
  "category": "",
  "tags": "rsk,, rskj,, node,, config,, peer,, scoring,",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": " The peer scoring system protects the RSKj node&#39;s resources from abusive or malicious peers"
 },
 {
  "url": "/rsk/rbtc/",
  "title": "RBTC Token",
  "category": "",
  "tags": "mainnet,, token,, transactions,, rbtc,, gas,, smart-contracts,, rsk,, conversion,, price,, gas-price,, gas-cost,, smart, bitcoin,, bitcoin",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "The Smart Bitcoin (RBTC) is the token used to pay for the execution of transactions in RSK. You can convert BTC into RBTC by sending BTC through the Powpeg (both in Testnet and Mainnet), or by using the faucet in Testnet, or exchanges in Mainnet. RBTC (Smart Bitcoin in Mainnet) Token Name RBTC Total Supply 21,000,000 RBTC Circulating supply API Contract Type Native (Bridge contract) How to get Exchanges Powpeg Logo RBTC-logo.png tRBTC (Smart Bitcoin in Testnet) Token Name tRBTC Total Supply 21,000,000 tRBTC Circulating supply API Contract Type Native (Bridge contract) How to get Faucet Powpeg Wallets See supported wallets. Exchanges Looking for…"
 },
 {
  "url": "/rsk/rbtc/conversion/",
  "title": "BTC to RBTC Conversion",
  "category": "",
  "tags": "rsk,, rbtc,, conversion,, peg,, 2-way,, peg-in,, peg-out,, federation,, powpeg",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Converting RBTC to BTC (peg-in) and BTC to RBTC (peg-out), for both Mainnet and Testnet."
 },
 {
  "url": "/rsk/rbtc/conversion/networks/mainnet/",
  "title": "Mainnet Guide",
  "category": "",
  "tags": "rsk,, rbtc,, conversion,, peg,, 2-way,, peg-in,, peg-out,, federation",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Converting BTC to RBTC (peg-in) and RBTC to BTC (peg-out)."
 },
 {
  "url": "/rsk/rbtc/conversion/networks/testnet/",
  "title": "Testnet Guide",
  "category": "",
  "tags": "rsk,, rbtc,, conversion,, peg,, 2-way,, peg-in,, peg-out,, federation",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Converting t-BTC to tRBTC (peg-in) and tRBTC to t-BTC (peg-out)."
 },
 {
  "url": "/rsk/rbtc/conversion/with-ledger/",
  "title": "Conversion using a Ledger hardware wallet",
  "category": "",
  "tags": "rsk,, rbtc,, conversion,, peg,, 2-way,, peg-in,, peg-out,, federation,, ledger",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How to perform the Powpeg mechanism using Ledger"
 },
 {
  "url": "/rsk/rbtc/conversion/with-node-and-console/",
  "title": "Conversion with node and console",
  "category": "",
  "tags": "rsk,, rbtc,, conversion,, peg,, 2-way,, peg-in,, peg-out,, federation,, node,, cli",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How to perform the Powpeg mechanism using node and console"
 },
 {
  "url": "/rsk/rbtc/conversion/with-trezor-t/",
  "title": "Accessing and using funds that are not in accounts derived with RSK dpath in Trezor T",
  "category": "",
  "tags": "rsk,, rbtc,, conversion,, peg,, 2-way,, peg-in,, peg-out,, federation,, trezor,, dpath",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How to configure a Trezor T hardware wallet to derive with a custom dpath"
 },
 {
  "url": "/rsk/rbtc/gas/",
  "title": "Gas",
  "category": "",
  "tags": "gas,, transactions,, rbtc,, mainnet,, smart-contracts,, rsk,, conversion,, bitcoin,, price,, gas-price,, cost",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Gas is the internal pricing for running a transaction or contract. When you send tokens, interact with a contract, send RBTC, or do anything else on the blockchain, you must pay for that computation. That payment is calculated as gas. In RSK this is paid in RBTC. What is gas? How do I choose an appropriate gas price and limit? What happens if my transaction fails? What happens if I run out of gas? Gas in smart contracts What is gas? There are four important concepts: Gas price: The cost of the operation. Gas limit: The maximum gas the operation can afford. It’s an upper limit the user sets to prevent losing gas. Total gas: The gas the operation consumed. Also referred to as gas used. Unit: Gas is paid in RBTC. Let’s start with a simple analogy: A car. To drive a car you need gas. Gas price is the money you pay for each gallon. Gas limit is the max amount of gas you accept to consume, the gas you charge. The total gas is the amount you’ve spent at the end of the trip. You can…"
 },
 {
  "url": "/rsk/architecture/turing-complete/",
  "title": "Turing complete",
  "category": "",
  "tags": "rsk,, rvm,, evm,, virtual, machine",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "The RSK virtual machine is compatible with Ethereum Virtual machine at an opcode level."
 },
 {
  "url": "/rsk/architecture/account-based/",
  "title": "Account Based RSK Addresses",
  "category": "",
  "tags": "rsk,, checksum,, chainId,, address,, derivation,, eip1191,, eip155,, bip44,, slip44",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "EIP-1191 chainId is used in RSK addresses as a checksum. m/44&#39;/137&#39;/0&#39;/0 is the derivation path used for BIP-44 compatible wallets."
 },
 {
  "url": "/rsk/architecture/powpeg/",
  "title": "Powpeg",
  "category": "",
  "tags": "rsk,, rbtc,, btc,, peg,, powpeg,, 2, way, peg",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Transfer BTC to RBTC, and RBTC to BTC through the Powpeg."
 },
 {
  "url": "/rsk/architecture/mining/",
  "title": "Merged Mining",
  "category": "",
  "tags": "rsk,, mining,, bitcoin,, pow",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How merge mining RSK with Bitcoin works, and its benefits"
 },
 {
  "url": "/rsk/architecture/mining/implementation-guide/",
  "title": "Implementation Guide",
  "category": "",
  "tags": "rsk,, mining,, bitcoin,, pool",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How to merge mine RSK using Bitcoin mining pool software"
 },
 {
  "url": "/rsk/architecture/mining/reference/",
  "title": "Merged mining reference",
  "category": "",
  "tags": "rsk,, mining,, bitcoin",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "How RSK leverages the Bitcoin network&#39;s consensus mechanism for its own secruity, and adds additional features to prevent double spending"
 },
 {
  "url": "/rsk/architecture/mining/remasc/",
  "title": "REMASC",
  "category": "",
  "tags": "rsk,, mining,, bitcoin,, remasc",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Reward Manager Smart Contract (REMASC) is a pre-compiled smart-contract that is executed on every block and has the responsibility to fairly distribute rewards collected from transaction fees into several participants of the network. However the distribution of rewards of a block is only performed once the block reaches a certain maturity. In other words, the rewards are paid only after a fixed number of blocks have confirmed a block. With the exception of the first blocks in the blockchain after genesis, every time a block is added to the blockchain, another previous block reaches maturity and its rewards are paid. REMASC is an implementation of DECOR+ [1] How it Works The REMASC contract maintains different internal accounts. One of these internal accounts is called Reward Balance. The Reward Balance always exists and its value can change when a new block is processed because of any of the following reasons: The block was accepted on the mainchain and all its transaction fees are added to the Reward balance. Miners and other rewarded parties get paid their reward and the rewarded value is subtracted from the Reward balance. As an example, let’s assume that a block has 2…"
 },
 {
  "url": "/rsk/architecture/security/",
  "title": "Security model",
  "category": "",
  "tags": "rsk,, security,, powpeg,, peg,, federation,, 2-way, peg",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Achieving security in a Powpegged sidechain using proofs of payment"
 },
 {
  "url": "/rsk/architecture/privacy/",
  "title": "Transaction Privacy",
  "category": "",
  "tags": "rsk,, privacy,, anonymous,, pseudonymous",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Transaction pseudonymity vs transaction anonymity"
 },
 {
  "url": "/rsk/architecture/fast-payments/",
  "title": "Fast payments",
  "category": "",
  "tags": "rsk,, remasc,, interval,, speed,, propagation",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Achieving faster on-chain block intervals"
 },
 {
  "url": "/rsk/architecture/flyover/",
  "title": "Flyover Protocol Documentation | Overview",
  "category": "",
  "tags": "flyover,, powpeg,, peg-in,, peg-out,, 2way-peg,, bridge,, rbtc,, btc,, testnet,, mainnet,, guide,, setup,, integrate",
  "date": "2023-02-27 01:54:23 +0000",
  "desc": "Welcome to the flyover documentation, learn about the flyover architecture, how to get started and integrate the flyover protocol into your project."
 }
]